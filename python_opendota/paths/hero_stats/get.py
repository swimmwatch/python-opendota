# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from python_opendota import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from python_opendota import schemas  # noqa: F401

from . import path


class SchemaFor200ResponseBodyApplicationJson(schemas.ListSchema):
    class MetaOapg:
        class items(schemas.DictSchema):
            class MetaOapg:
                class properties:
                    id = schemas.IntSchema
                    name = schemas.StrSchema
                    localized_name = schemas.StrSchema
                    img = schemas.StrSchema
                    icon = schemas.StrSchema
                    pro_win = schemas.IntSchema
                    pro_pick = schemas.IntSchema
                    hero_id = schemas.IntSchema
                    pro_ban = schemas.IntSchema
                    _1_pick = schemas.IntSchema
                    _1_win = schemas.IntSchema
                    _2_pick = schemas.IntSchema
                    _2_win = schemas.IntSchema
                    _3_pick = schemas.IntSchema
                    _3_win = schemas.IntSchema
                    _4_pick = schemas.IntSchema
                    _4_win = schemas.IntSchema
                    _5_pick = schemas.IntSchema
                    _5_win = schemas.IntSchema
                    _6_pick = schemas.IntSchema
                    _6_win = schemas.IntSchema
                    _7_pick = schemas.IntSchema
                    _7_win = schemas.IntSchema
                    _8_pick = schemas.IntSchema
                    _8_win = schemas.IntSchema
                    turbo_pick = schemas.IntSchema
                    turbo_win = schemas.IntSchema
                    __annotations__ = {
                        "id": id,
                        "name": name,
                        "localized_name": localized_name,
                        "img": img,
                        "icon": icon,
                        "pro_win": pro_win,
                        "pro_pick": pro_pick,
                        "hero_id": hero_id,
                        "pro_ban": pro_ban,
                        "1_pick": _1_pick,
                        "1_win": _1_win,
                        "2_pick": _2_pick,
                        "2_win": _2_win,
                        "3_pick": _3_pick,
                        "3_win": _3_win,
                        "4_pick": _4_pick,
                        "4_win": _4_win,
                        "5_pick": _5_pick,
                        "5_win": _5_win,
                        "6_pick": _6_pick,
                        "6_win": _6_win,
                        "7_pick": _7_pick,
                        "7_win": _7_win,
                        "8_pick": _8_pick,
                        "8_win": _8_win,
                        "turbo_pick": turbo_pick,
                        "turbo_win": turbo_win,
                    }

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["id"]
            ) -> MetaOapg.properties.id:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["name"]
            ) -> MetaOapg.properties.name:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["localized_name"]
            ) -> MetaOapg.properties.localized_name:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["img"]
            ) -> MetaOapg.properties.img:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["icon"]
            ) -> MetaOapg.properties.icon:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["pro_win"]
            ) -> MetaOapg.properties.pro_win:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["pro_pick"]
            ) -> MetaOapg.properties.pro_pick:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["hero_id"]
            ) -> MetaOapg.properties.hero_id:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["pro_ban"]
            ) -> MetaOapg.properties.pro_ban:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["1_pick"]
            ) -> MetaOapg.properties._1_pick:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["1_win"]
            ) -> MetaOapg.properties._1_win:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["2_pick"]
            ) -> MetaOapg.properties._2_pick:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["2_win"]
            ) -> MetaOapg.properties._2_win:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["3_pick"]
            ) -> MetaOapg.properties._3_pick:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["3_win"]
            ) -> MetaOapg.properties._3_win:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["4_pick"]
            ) -> MetaOapg.properties._4_pick:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["4_win"]
            ) -> MetaOapg.properties._4_win:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["5_pick"]
            ) -> MetaOapg.properties._5_pick:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["5_win"]
            ) -> MetaOapg.properties._5_win:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["6_pick"]
            ) -> MetaOapg.properties._6_pick:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["6_win"]
            ) -> MetaOapg.properties._6_win:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["7_pick"]
            ) -> MetaOapg.properties._7_pick:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["7_win"]
            ) -> MetaOapg.properties._7_win:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["8_pick"]
            ) -> MetaOapg.properties._8_pick:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["8_win"]
            ) -> MetaOapg.properties._8_win:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["turbo_pick"]
            ) -> MetaOapg.properties.turbo_pick:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["turbo_win"]
            ) -> MetaOapg.properties.turbo_win:
                ...

            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
                ...

            def __getitem__(
                self,
                name: typing.Union[
                    typing_extensions.Literal[
                        "id",
                        "name",
                        "localized_name",
                        "img",
                        "icon",
                        "pro_win",
                        "pro_pick",
                        "hero_id",
                        "pro_ban",
                        "1_pick",
                        "1_win",
                        "2_pick",
                        "2_win",
                        "3_pick",
                        "3_win",
                        "4_pick",
                        "4_win",
                        "5_pick",
                        "5_win",
                        "6_pick",
                        "6_win",
                        "7_pick",
                        "7_win",
                        "8_pick",
                        "8_win",
                        "turbo_pick",
                        "turbo_win",
                    ],
                    str,
                ],
            ):
                # dict_instance[name] accessor
                return super().__getitem__(name)

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["id"]
            ) -> typing.Union[MetaOapg.properties.id, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["name"]
            ) -> typing.Union[MetaOapg.properties.name, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["localized_name"]
            ) -> typing.Union[MetaOapg.properties.localized_name, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["img"]
            ) -> typing.Union[MetaOapg.properties.img, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["icon"]
            ) -> typing.Union[MetaOapg.properties.icon, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["pro_win"]
            ) -> typing.Union[MetaOapg.properties.pro_win, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["pro_pick"]
            ) -> typing.Union[MetaOapg.properties.pro_pick, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["hero_id"]
            ) -> typing.Union[MetaOapg.properties.hero_id, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["pro_ban"]
            ) -> typing.Union[MetaOapg.properties.pro_ban, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["1_pick"]
            ) -> typing.Union[MetaOapg.properties._1_pick, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["1_win"]
            ) -> typing.Union[MetaOapg.properties._1_win, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["2_pick"]
            ) -> typing.Union[MetaOapg.properties._2_pick, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["2_win"]
            ) -> typing.Union[MetaOapg.properties._2_win, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["3_pick"]
            ) -> typing.Union[MetaOapg.properties._3_pick, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["3_win"]
            ) -> typing.Union[MetaOapg.properties._3_win, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["4_pick"]
            ) -> typing.Union[MetaOapg.properties._4_pick, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["4_win"]
            ) -> typing.Union[MetaOapg.properties._4_win, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["5_pick"]
            ) -> typing.Union[MetaOapg.properties._5_pick, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["5_win"]
            ) -> typing.Union[MetaOapg.properties._5_win, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["6_pick"]
            ) -> typing.Union[MetaOapg.properties._6_pick, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["6_win"]
            ) -> typing.Union[MetaOapg.properties._6_win, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["7_pick"]
            ) -> typing.Union[MetaOapg.properties._7_pick, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["7_win"]
            ) -> typing.Union[MetaOapg.properties._7_win, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["8_pick"]
            ) -> typing.Union[MetaOapg.properties._8_pick, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["8_win"]
            ) -> typing.Union[MetaOapg.properties._8_win, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["turbo_pick"]
            ) -> typing.Union[MetaOapg.properties.turbo_pick, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["turbo_win"]
            ) -> typing.Union[MetaOapg.properties.turbo_win, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: str
            ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
                ...

            def get_item_oapg(
                self,
                name: typing.Union[
                    typing_extensions.Literal[
                        "id",
                        "name",
                        "localized_name",
                        "img",
                        "icon",
                        "pro_win",
                        "pro_pick",
                        "hero_id",
                        "pro_ban",
                        "1_pick",
                        "1_win",
                        "2_pick",
                        "2_win",
                        "3_pick",
                        "3_win",
                        "4_pick",
                        "4_win",
                        "5_pick",
                        "5_win",
                        "6_pick",
                        "6_win",
                        "7_pick",
                        "7_win",
                        "8_pick",
                        "8_win",
                        "turbo_pick",
                        "turbo_win",
                    ],
                    str,
                ],
            ):
                return super().get_item_oapg(name)

            def __new__(
                cls,
                *_args: typing.Union[
                    dict,
                    frozendict.frozendict,
                ],
                id: typing.Union[
                    MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset
                ] = schemas.unset,
                name: typing.Union[
                    MetaOapg.properties.name, str, schemas.Unset
                ] = schemas.unset,
                localized_name: typing.Union[
                    MetaOapg.properties.localized_name, str, schemas.Unset
                ] = schemas.unset,
                img: typing.Union[
                    MetaOapg.properties.img, str, schemas.Unset
                ] = schemas.unset,
                icon: typing.Union[
                    MetaOapg.properties.icon, str, schemas.Unset
                ] = schemas.unset,
                pro_win: typing.Union[
                    MetaOapg.properties.pro_win, decimal.Decimal, int, schemas.Unset
                ] = schemas.unset,
                pro_pick: typing.Union[
                    MetaOapg.properties.pro_pick, decimal.Decimal, int, schemas.Unset
                ] = schemas.unset,
                hero_id: typing.Union[
                    MetaOapg.properties.hero_id, decimal.Decimal, int, schemas.Unset
                ] = schemas.unset,
                pro_ban: typing.Union[
                    MetaOapg.properties.pro_ban, decimal.Decimal, int, schemas.Unset
                ] = schemas.unset,
                turbo_pick: typing.Union[
                    MetaOapg.properties.turbo_pick, decimal.Decimal, int, schemas.Unset
                ] = schemas.unset,
                turbo_win: typing.Union[
                    MetaOapg.properties.turbo_win, decimal.Decimal, int, schemas.Unset
                ] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[
                    schemas.AnyTypeSchema,
                    dict,
                    frozendict.frozendict,
                    str,
                    date,
                    datetime,
                    uuid.UUID,
                    int,
                    float,
                    decimal.Decimal,
                    None,
                    list,
                    tuple,
                    bytes,
                ],
            ) -> "items":
                return super().__new__(
                    cls,
                    *_args,
                    id=id,
                    name=name,
                    localized_name=localized_name,
                    img=img,
                    icon=icon,
                    pro_win=pro_win,
                    pro_pick=pro_pick,
                    hero_id=hero_id,
                    pro_ban=pro_ban,
                    turbo_pick=turbo_pick,
                    turbo_win=turbo_win,
                    _configuration=_configuration,
                    **kwargs,
                )

    def __new__(
        cls,
        _arg: typing.Union[
            typing.Tuple[
                typing.Union[
                    MetaOapg.items,
                    dict,
                    frozendict.frozendict,
                ]
            ],
            typing.List[
                typing.Union[
                    MetaOapg.items,
                    dict,
                    frozendict.frozendict,
                ]
            ],
        ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> "SchemaFor200ResponseBodyApplicationJson":
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        "application/json": api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson
        ),
    },
)
_status_code_to_response = {
    "200": _response_for_200,
}
_all_accept_content_types = ("application/json",)


class BaseApi(api_client.Api):
    @typing.overload
    def _hero_stats_get_oapg(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[ApiResponseFor200,]:
        ...

    @typing.overload
    def _hero_stats_get_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization:
        ...

    @typing.overload
    def _hero_stats_get_oapg(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[ApiResponseFor200, api_client.ApiResponseWithoutDeserialization,]:
        ...

    def _hero_stats_get_oapg(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        GET /heroStats
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add("Accept", accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method="get".upper(),
            headers=_headers,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(
                response=response
            )
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(
                    response, self.api_client.configuration
                )
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(
                    response=response
                )

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response,
            )

        return api_response


class HeroStatsGet(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def hero_stats_get(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[ApiResponseFor200,]:
        ...

    @typing.overload
    def hero_stats_get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization:
        ...

    @typing.overload
    def hero_stats_get(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[ApiResponseFor200, api_client.ApiResponseWithoutDeserialization,]:
        ...

    def hero_stats_get(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._hero_stats_get_oapg(
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization,
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[ApiResponseFor200,]:
        ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization:
        ...

    @typing.overload
    def get(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[ApiResponseFor200, api_client.ApiResponseWithoutDeserialization,]:
        ...

    def get(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._hero_stats_get_oapg(
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization,
        )
