# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from python_opendota import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from python_opendota import schemas  # noqa: F401

# Path params
AccountIdSchema = schemas.IntSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    "RequestRequiredPathParams",
    {
        "account_id": typing.Union[
            AccountIdSchema,
            decimal.Decimal,
            int,
        ],
    },
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    "RequestOptionalPathParams", {}, total=False
)

class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass

request_path_account_id = api_client.PathParameter(
    name="account_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=AccountIdSchema,
    required=True,
)

class SchemaFor200ResponseBodyApplicationJson(schemas.DictSchema):
    class MetaOapg:
        class properties:
            solo_competitive_rank = schemas.IntSchema
            competitive_rank = schemas.IntSchema
            rank_tier = schemas.NumberSchema
            leaderboard_rank = schemas.NumberSchema

            class mmr_estimate(schemas.DictSchema):
                class MetaOapg:
                    class properties:
                        estimate = schemas.NumberSchema
                        __annotations__ = {
                            "estimate": estimate,
                        }
                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["estimate"]
                ) -> MetaOapg.properties.estimate: ...
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                def __getitem__(
                    self,
                    name: typing.Union[
                        typing_extensions.Literal[
                            "estimate",
                        ],
                        str,
                    ],
                ):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["estimate"]
                ) -> typing.Union[MetaOapg.properties.estimate, schemas.Unset]: ...
                @typing.overload
                def get_item_oapg(
                    self, name: str
                ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                def get_item_oapg(
                    self,
                    name: typing.Union[
                        typing_extensions.Literal[
                            "estimate",
                        ],
                        str,
                    ],
                ):
                    return super().get_item_oapg(name)
                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                    ],
                    estimate: typing.Union[
                        MetaOapg.properties.estimate,
                        decimal.Decimal,
                        int,
                        float,
                        schemas.Unset,
                    ] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[
                        schemas.AnyTypeSchema,
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        None,
                        list,
                        tuple,
                        bytes,
                    ],
                ) -> "mmr_estimate":
                    return super().__new__(
                        cls,
                        *_args,
                        estimate=estimate,
                        _configuration=_configuration,
                        **kwargs,
                    )

            class profile(schemas.DictSchema):
                class MetaOapg:
                    class properties:
                        account_id = schemas.IntSchema
                        personaname = schemas.StrSchema
                        name = schemas.StrSchema
                        plus = schemas.BoolSchema
                        cheese = schemas.IntSchema
                        steamid = schemas.StrSchema
                        avatar = schemas.StrSchema
                        avatarmedium = schemas.StrSchema
                        avatarfull = schemas.StrSchema
                        profileurl = schemas.StrSchema
                        last_login = schemas.StrSchema
                        loccountrycode = schemas.StrSchema
                        is_contributor = schemas.BoolSchema
                        is_subscriber = schemas.BoolSchema
                        __annotations__ = {
                            "account_id": account_id,
                            "personaname": personaname,
                            "name": name,
                            "plus": plus,
                            "cheese": cheese,
                            "steamid": steamid,
                            "avatar": avatar,
                            "avatarmedium": avatarmedium,
                            "avatarfull": avatarfull,
                            "profileurl": profileurl,
                            "last_login": last_login,
                            "loccountrycode": loccountrycode,
                            "is_contributor": is_contributor,
                            "is_subscriber": is_subscriber,
                        }
                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["account_id"]
                ) -> MetaOapg.properties.account_id: ...
                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["personaname"]
                ) -> MetaOapg.properties.personaname: ...
                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["name"]
                ) -> MetaOapg.properties.name: ...
                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["plus"]
                ) -> MetaOapg.properties.plus: ...
                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["cheese"]
                ) -> MetaOapg.properties.cheese: ...
                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["steamid"]
                ) -> MetaOapg.properties.steamid: ...
                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["avatar"]
                ) -> MetaOapg.properties.avatar: ...
                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["avatarmedium"]
                ) -> MetaOapg.properties.avatarmedium: ...
                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["avatarfull"]
                ) -> MetaOapg.properties.avatarfull: ...
                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["profileurl"]
                ) -> MetaOapg.properties.profileurl: ...
                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["last_login"]
                ) -> MetaOapg.properties.last_login: ...
                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["loccountrycode"]
                ) -> MetaOapg.properties.loccountrycode: ...
                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["is_contributor"]
                ) -> MetaOapg.properties.is_contributor: ...
                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["is_subscriber"]
                ) -> MetaOapg.properties.is_subscriber: ...
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                def __getitem__(
                    self,
                    name: typing.Union[
                        typing_extensions.Literal[
                            "account_id",
                            "personaname",
                            "name",
                            "plus",
                            "cheese",
                            "steamid",
                            "avatar",
                            "avatarmedium",
                            "avatarfull",
                            "profileurl",
                            "last_login",
                            "loccountrycode",
                            "is_contributor",
                            "is_subscriber",
                        ],
                        str,
                    ],
                ):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["account_id"]
                ) -> typing.Union[MetaOapg.properties.account_id, schemas.Unset]: ...
                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["personaname"]
                ) -> typing.Union[MetaOapg.properties.personaname, schemas.Unset]: ...
                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["name"]
                ) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["plus"]
                ) -> typing.Union[MetaOapg.properties.plus, schemas.Unset]: ...
                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["cheese"]
                ) -> typing.Union[MetaOapg.properties.cheese, schemas.Unset]: ...
                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["steamid"]
                ) -> typing.Union[MetaOapg.properties.steamid, schemas.Unset]: ...
                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["avatar"]
                ) -> typing.Union[MetaOapg.properties.avatar, schemas.Unset]: ...
                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["avatarmedium"]
                ) -> typing.Union[MetaOapg.properties.avatarmedium, schemas.Unset]: ...
                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["avatarfull"]
                ) -> typing.Union[MetaOapg.properties.avatarfull, schemas.Unset]: ...
                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["profileurl"]
                ) -> typing.Union[MetaOapg.properties.profileurl, schemas.Unset]: ...
                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["last_login"]
                ) -> typing.Union[MetaOapg.properties.last_login, schemas.Unset]: ...
                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["loccountrycode"]
                ) -> typing.Union[
                    MetaOapg.properties.loccountrycode, schemas.Unset
                ]: ...
                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["is_contributor"]
                ) -> typing.Union[
                    MetaOapg.properties.is_contributor, schemas.Unset
                ]: ...
                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["is_subscriber"]
                ) -> typing.Union[MetaOapg.properties.is_subscriber, schemas.Unset]: ...
                @typing.overload
                def get_item_oapg(
                    self, name: str
                ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                def get_item_oapg(
                    self,
                    name: typing.Union[
                        typing_extensions.Literal[
                            "account_id",
                            "personaname",
                            "name",
                            "plus",
                            "cheese",
                            "steamid",
                            "avatar",
                            "avatarmedium",
                            "avatarfull",
                            "profileurl",
                            "last_login",
                            "loccountrycode",
                            "is_contributor",
                            "is_subscriber",
                        ],
                        str,
                    ],
                ):
                    return super().get_item_oapg(name)
                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                    ],
                    account_id: typing.Union[
                        MetaOapg.properties.account_id,
                        decimal.Decimal,
                        int,
                        schemas.Unset,
                    ] = schemas.unset,
                    personaname: typing.Union[
                        MetaOapg.properties.personaname, str, schemas.Unset
                    ] = schemas.unset,
                    name: typing.Union[
                        MetaOapg.properties.name, str, schemas.Unset
                    ] = schemas.unset,
                    plus: typing.Union[
                        MetaOapg.properties.plus, bool, schemas.Unset
                    ] = schemas.unset,
                    cheese: typing.Union[
                        MetaOapg.properties.cheese, decimal.Decimal, int, schemas.Unset
                    ] = schemas.unset,
                    steamid: typing.Union[
                        MetaOapg.properties.steamid, str, schemas.Unset
                    ] = schemas.unset,
                    avatar: typing.Union[
                        MetaOapg.properties.avatar, str, schemas.Unset
                    ] = schemas.unset,
                    avatarmedium: typing.Union[
                        MetaOapg.properties.avatarmedium, str, schemas.Unset
                    ] = schemas.unset,
                    avatarfull: typing.Union[
                        MetaOapg.properties.avatarfull, str, schemas.Unset
                    ] = schemas.unset,
                    profileurl: typing.Union[
                        MetaOapg.properties.profileurl, str, schemas.Unset
                    ] = schemas.unset,
                    last_login: typing.Union[
                        MetaOapg.properties.last_login, str, schemas.Unset
                    ] = schemas.unset,
                    loccountrycode: typing.Union[
                        MetaOapg.properties.loccountrycode, str, schemas.Unset
                    ] = schemas.unset,
                    is_contributor: typing.Union[
                        MetaOapg.properties.is_contributor, bool, schemas.Unset
                    ] = schemas.unset,
                    is_subscriber: typing.Union[
                        MetaOapg.properties.is_subscriber, bool, schemas.Unset
                    ] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[
                        schemas.AnyTypeSchema,
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        None,
                        list,
                        tuple,
                        bytes,
                    ],
                ) -> "profile":
                    return super().__new__(
                        cls,
                        *_args,
                        account_id=account_id,
                        personaname=personaname,
                        name=name,
                        plus=plus,
                        cheese=cheese,
                        steamid=steamid,
                        avatar=avatar,
                        avatarmedium=avatarmedium,
                        avatarfull=avatarfull,
                        profileurl=profileurl,
                        last_login=last_login,
                        loccountrycode=loccountrycode,
                        is_contributor=is_contributor,
                        is_subscriber=is_subscriber,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "solo_competitive_rank": solo_competitive_rank,
                "competitive_rank": competitive_rank,
                "rank_tier": rank_tier,
                "leaderboard_rank": leaderboard_rank,
                "mmr_estimate": mmr_estimate,
                "profile": profile,
            }
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["solo_competitive_rank"]
    ) -> MetaOapg.properties.solo_competitive_rank: ...
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["competitive_rank"]
    ) -> MetaOapg.properties.competitive_rank: ...
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["rank_tier"]
    ) -> MetaOapg.properties.rank_tier: ...
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["leaderboard_rank"]
    ) -> MetaOapg.properties.leaderboard_rank: ...
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["mmr_estimate"]
    ) -> MetaOapg.properties.mmr_estimate: ...
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["profile"]
    ) -> MetaOapg.properties.profile: ...
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "solo_competitive_rank",
                "competitive_rank",
                "rank_tier",
                "leaderboard_rank",
                "mmr_estimate",
                "profile",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["solo_competitive_rank"]
    ) -> typing.Union[MetaOapg.properties.solo_competitive_rank, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["competitive_rank"]
    ) -> typing.Union[MetaOapg.properties.competitive_rank, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["rank_tier"]
    ) -> typing.Union[MetaOapg.properties.rank_tier, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["leaderboard_rank"]
    ) -> typing.Union[MetaOapg.properties.leaderboard_rank, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["mmr_estimate"]
    ) -> typing.Union[MetaOapg.properties.mmr_estimate, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["profile"]
    ) -> typing.Union[MetaOapg.properties.profile, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "solo_competitive_rank",
                "competitive_rank",
                "rank_tier",
                "leaderboard_rank",
                "mmr_estimate",
                "profile",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)
    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        solo_competitive_rank: typing.Union[
            MetaOapg.properties.solo_competitive_rank,
            decimal.Decimal,
            int,
            schemas.Unset,
        ] = schemas.unset,
        competitive_rank: typing.Union[
            MetaOapg.properties.competitive_rank, decimal.Decimal, int, schemas.Unset
        ] = schemas.unset,
        rank_tier: typing.Union[
            MetaOapg.properties.rank_tier, decimal.Decimal, int, float, schemas.Unset
        ] = schemas.unset,
        leaderboard_rank: typing.Union[
            MetaOapg.properties.leaderboard_rank,
            decimal.Decimal,
            int,
            float,
            schemas.Unset,
        ] = schemas.unset,
        mmr_estimate: typing.Union[
            MetaOapg.properties.mmr_estimate, dict, frozendict.frozendict, schemas.Unset
        ] = schemas.unset,
        profile: typing.Union[
            MetaOapg.properties.profile, dict, frozendict.frozendict, schemas.Unset
        ] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "SchemaFor200ResponseBodyApplicationJson":
        return super().__new__(
            cls,
            *_args,
            solo_competitive_rank=solo_competitive_rank,
            competitive_rank=competitive_rank,
            rank_tier=rank_tier,
            leaderboard_rank=leaderboard_rank,
            mmr_estimate=mmr_estimate,
            profile=profile,
            _configuration=_configuration,
            **kwargs,
        )

@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset

_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        "application/json": api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson
        ),
    },
)
_all_accept_content_types = ("application/json",)

class BaseApi(api_client.Api):
    @typing.overload
    def _players_account_id_get_oapg(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[ApiResponseFor200,]: ...
    @typing.overload
    def _players_account_id_get_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...
    @typing.overload
    def _players_account_id_get_oapg(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...
    def _players_account_id_get_oapg(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        GET /players/{account_id}
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value

        _path_params = {}
        for parameter in (request_path_account_id,):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        for k, v in _path_params.items():
            used_path = used_path.replace("{%s}" % k, v)

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add("Accept", accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method="get".upper(),
            headers=_headers,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(
                response=response
            )
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(
                    response, self.api_client.configuration
                )
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(
                    response=response
                )

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response,
            )

        return api_response

class PlayersAccountIdGet(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def players_account_id_get(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[ApiResponseFor200,]: ...
    @typing.overload
    def players_account_id_get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...
    @typing.overload
    def players_account_id_get(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...
    def players_account_id_get(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._players_account_id_get_oapg(
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization,
        )

class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[ApiResponseFor200,]: ...
    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...
    @typing.overload
    def get(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...
    def get(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._players_account_id_get_oapg(
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization,
        )
