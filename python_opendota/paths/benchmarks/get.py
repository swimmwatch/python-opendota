# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from python_opendota import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from python_opendota import schemas  # noqa: F401

from . import path

# Query params
HeroIdSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    "RequestRequiredQueryParams",
    {
        "hero_id": typing.Union[
            HeroIdSchema,
            str,
        ],
    },
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    "RequestOptionalQueryParams", {}, total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_hero_id = api_client.QueryParameter(
    name="hero_id",
    style=api_client.ParameterStyle.FORM,
    schema=HeroIdSchema,
    required=True,
    explode=True,
)


class SchemaFor200ResponseBodyApplicationJson(schemas.DictSchema):
    class MetaOapg:
        class properties:
            hero_id = schemas.IntSchema

            class result(schemas.DictSchema):
                class MetaOapg:
                    class properties:
                        class gold_per_min(schemas.ListSchema):
                            class MetaOapg:
                                class items(schemas.DictSchema):
                                    class MetaOapg:
                                        class properties:
                                            percentile = schemas.NumberSchema
                                            value = schemas.IntSchema
                                            __annotations__ = {
                                                "percentile": percentile,
                                                "value": value,
                                            }

                                    @typing.overload
                                    def __getitem__(
                                        self,
                                        name: typing_extensions.Literal["percentile"],
                                    ) -> MetaOapg.properties.percentile:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self, name: typing_extensions.Literal["value"]
                                    ) -> MetaOapg.properties.value:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self, name: str
                                    ) -> schemas.UnsetAnyTypeSchema:
                                        ...

                                    def __getitem__(
                                        self,
                                        name: typing.Union[
                                            typing_extensions.Literal[
                                                "percentile",
                                                "value",
                                            ],
                                            str,
                                        ],
                                    ):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)

                                    @typing.overload
                                    def get_item_oapg(
                                        self,
                                        name: typing_extensions.Literal["percentile"],
                                    ) -> typing.Union[
                                        MetaOapg.properties.percentile, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: typing_extensions.Literal["value"]
                                    ) -> typing.Union[
                                        MetaOapg.properties.value, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: str
                                    ) -> typing.Union[
                                        schemas.UnsetAnyTypeSchema, schemas.Unset
                                    ]:
                                        ...

                                    def get_item_oapg(
                                        self,
                                        name: typing.Union[
                                            typing_extensions.Literal[
                                                "percentile",
                                                "value",
                                            ],
                                            str,
                                        ],
                                    ):
                                        return super().get_item_oapg(name)

                                    def __new__(
                                        cls,
                                        *_args: typing.Union[
                                            dict,
                                            frozendict.frozendict,
                                        ],
                                        percentile: typing.Union[
                                            MetaOapg.properties.percentile,
                                            decimal.Decimal,
                                            int,
                                            float,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        value: typing.Union[
                                            MetaOapg.properties.value,
                                            decimal.Decimal,
                                            int,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        _configuration: typing.Optional[
                                            schemas.Configuration
                                        ] = None,
                                        **kwargs: typing.Union[
                                            schemas.AnyTypeSchema,
                                            dict,
                                            frozendict.frozendict,
                                            str,
                                            date,
                                            datetime,
                                            uuid.UUID,
                                            int,
                                            float,
                                            decimal.Decimal,
                                            None,
                                            list,
                                            tuple,
                                            bytes,
                                        ],
                                    ) -> "items":
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            percentile=percentile,
                                            value=value,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )

                            def __new__(
                                cls,
                                _arg: typing.Union[
                                    typing.Tuple[
                                        typing.Union[
                                            MetaOapg.items,
                                            dict,
                                            frozendict.frozendict,
                                        ]
                                    ],
                                    typing.List[
                                        typing.Union[
                                            MetaOapg.items,
                                            dict,
                                            frozendict.frozendict,
                                        ]
                                    ],
                                ],
                                _configuration: typing.Optional[
                                    schemas.Configuration
                                ] = None,
                            ) -> "gold_per_min":
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )

                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)

                        class xp_per_min(schemas.ListSchema):
                            class MetaOapg:
                                class items(schemas.DictSchema):
                                    class MetaOapg:
                                        class properties:
                                            percentile = schemas.NumberSchema
                                            value = schemas.IntSchema
                                            __annotations__ = {
                                                "percentile": percentile,
                                                "value": value,
                                            }

                                    @typing.overload
                                    def __getitem__(
                                        self,
                                        name: typing_extensions.Literal["percentile"],
                                    ) -> MetaOapg.properties.percentile:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self, name: typing_extensions.Literal["value"]
                                    ) -> MetaOapg.properties.value:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self, name: str
                                    ) -> schemas.UnsetAnyTypeSchema:
                                        ...

                                    def __getitem__(
                                        self,
                                        name: typing.Union[
                                            typing_extensions.Literal[
                                                "percentile",
                                                "value",
                                            ],
                                            str,
                                        ],
                                    ):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)

                                    @typing.overload
                                    def get_item_oapg(
                                        self,
                                        name: typing_extensions.Literal["percentile"],
                                    ) -> typing.Union[
                                        MetaOapg.properties.percentile, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: typing_extensions.Literal["value"]
                                    ) -> typing.Union[
                                        MetaOapg.properties.value, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: str
                                    ) -> typing.Union[
                                        schemas.UnsetAnyTypeSchema, schemas.Unset
                                    ]:
                                        ...

                                    def get_item_oapg(
                                        self,
                                        name: typing.Union[
                                            typing_extensions.Literal[
                                                "percentile",
                                                "value",
                                            ],
                                            str,
                                        ],
                                    ):
                                        return super().get_item_oapg(name)

                                    def __new__(
                                        cls,
                                        *_args: typing.Union[
                                            dict,
                                            frozendict.frozendict,
                                        ],
                                        percentile: typing.Union[
                                            MetaOapg.properties.percentile,
                                            decimal.Decimal,
                                            int,
                                            float,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        value: typing.Union[
                                            MetaOapg.properties.value,
                                            decimal.Decimal,
                                            int,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        _configuration: typing.Optional[
                                            schemas.Configuration
                                        ] = None,
                                        **kwargs: typing.Union[
                                            schemas.AnyTypeSchema,
                                            dict,
                                            frozendict.frozendict,
                                            str,
                                            date,
                                            datetime,
                                            uuid.UUID,
                                            int,
                                            float,
                                            decimal.Decimal,
                                            None,
                                            list,
                                            tuple,
                                            bytes,
                                        ],
                                    ) -> "items":
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            percentile=percentile,
                                            value=value,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )

                            def __new__(
                                cls,
                                _arg: typing.Union[
                                    typing.Tuple[
                                        typing.Union[
                                            MetaOapg.items,
                                            dict,
                                            frozendict.frozendict,
                                        ]
                                    ],
                                    typing.List[
                                        typing.Union[
                                            MetaOapg.items,
                                            dict,
                                            frozendict.frozendict,
                                        ]
                                    ],
                                ],
                                _configuration: typing.Optional[
                                    schemas.Configuration
                                ] = None,
                            ) -> "xp_per_min":
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )

                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)

                        class kills_per_min(schemas.ListSchema):
                            class MetaOapg:
                                class items(schemas.DictSchema):
                                    class MetaOapg:
                                        class properties:
                                            percentile = schemas.NumberSchema
                                            value = schemas.IntSchema
                                            __annotations__ = {
                                                "percentile": percentile,
                                                "value": value,
                                            }

                                    @typing.overload
                                    def __getitem__(
                                        self,
                                        name: typing_extensions.Literal["percentile"],
                                    ) -> MetaOapg.properties.percentile:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self, name: typing_extensions.Literal["value"]
                                    ) -> MetaOapg.properties.value:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self, name: str
                                    ) -> schemas.UnsetAnyTypeSchema:
                                        ...

                                    def __getitem__(
                                        self,
                                        name: typing.Union[
                                            typing_extensions.Literal[
                                                "percentile",
                                                "value",
                                            ],
                                            str,
                                        ],
                                    ):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)

                                    @typing.overload
                                    def get_item_oapg(
                                        self,
                                        name: typing_extensions.Literal["percentile"],
                                    ) -> typing.Union[
                                        MetaOapg.properties.percentile, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: typing_extensions.Literal["value"]
                                    ) -> typing.Union[
                                        MetaOapg.properties.value, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: str
                                    ) -> typing.Union[
                                        schemas.UnsetAnyTypeSchema, schemas.Unset
                                    ]:
                                        ...

                                    def get_item_oapg(
                                        self,
                                        name: typing.Union[
                                            typing_extensions.Literal[
                                                "percentile",
                                                "value",
                                            ],
                                            str,
                                        ],
                                    ):
                                        return super().get_item_oapg(name)

                                    def __new__(
                                        cls,
                                        *_args: typing.Union[
                                            dict,
                                            frozendict.frozendict,
                                        ],
                                        percentile: typing.Union[
                                            MetaOapg.properties.percentile,
                                            decimal.Decimal,
                                            int,
                                            float,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        value: typing.Union[
                                            MetaOapg.properties.value,
                                            decimal.Decimal,
                                            int,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        _configuration: typing.Optional[
                                            schemas.Configuration
                                        ] = None,
                                        **kwargs: typing.Union[
                                            schemas.AnyTypeSchema,
                                            dict,
                                            frozendict.frozendict,
                                            str,
                                            date,
                                            datetime,
                                            uuid.UUID,
                                            int,
                                            float,
                                            decimal.Decimal,
                                            None,
                                            list,
                                            tuple,
                                            bytes,
                                        ],
                                    ) -> "items":
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            percentile=percentile,
                                            value=value,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )

                            def __new__(
                                cls,
                                _arg: typing.Union[
                                    typing.Tuple[
                                        typing.Union[
                                            MetaOapg.items,
                                            dict,
                                            frozendict.frozendict,
                                        ]
                                    ],
                                    typing.List[
                                        typing.Union[
                                            MetaOapg.items,
                                            dict,
                                            frozendict.frozendict,
                                        ]
                                    ],
                                ],
                                _configuration: typing.Optional[
                                    schemas.Configuration
                                ] = None,
                            ) -> "kills_per_min":
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )

                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)

                        class last_hits_per_min(schemas.ListSchema):
                            class MetaOapg:
                                class items(schemas.DictSchema):
                                    class MetaOapg:
                                        class properties:
                                            percentile = schemas.NumberSchema
                                            value = schemas.IntSchema
                                            __annotations__ = {
                                                "percentile": percentile,
                                                "value": value,
                                            }

                                    @typing.overload
                                    def __getitem__(
                                        self,
                                        name: typing_extensions.Literal["percentile"],
                                    ) -> MetaOapg.properties.percentile:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self, name: typing_extensions.Literal["value"]
                                    ) -> MetaOapg.properties.value:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self, name: str
                                    ) -> schemas.UnsetAnyTypeSchema:
                                        ...

                                    def __getitem__(
                                        self,
                                        name: typing.Union[
                                            typing_extensions.Literal[
                                                "percentile",
                                                "value",
                                            ],
                                            str,
                                        ],
                                    ):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)

                                    @typing.overload
                                    def get_item_oapg(
                                        self,
                                        name: typing_extensions.Literal["percentile"],
                                    ) -> typing.Union[
                                        MetaOapg.properties.percentile, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: typing_extensions.Literal["value"]
                                    ) -> typing.Union[
                                        MetaOapg.properties.value, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: str
                                    ) -> typing.Union[
                                        schemas.UnsetAnyTypeSchema, schemas.Unset
                                    ]:
                                        ...

                                    def get_item_oapg(
                                        self,
                                        name: typing.Union[
                                            typing_extensions.Literal[
                                                "percentile",
                                                "value",
                                            ],
                                            str,
                                        ],
                                    ):
                                        return super().get_item_oapg(name)

                                    def __new__(
                                        cls,
                                        *_args: typing.Union[
                                            dict,
                                            frozendict.frozendict,
                                        ],
                                        percentile: typing.Union[
                                            MetaOapg.properties.percentile,
                                            decimal.Decimal,
                                            int,
                                            float,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        value: typing.Union[
                                            MetaOapg.properties.value,
                                            decimal.Decimal,
                                            int,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        _configuration: typing.Optional[
                                            schemas.Configuration
                                        ] = None,
                                        **kwargs: typing.Union[
                                            schemas.AnyTypeSchema,
                                            dict,
                                            frozendict.frozendict,
                                            str,
                                            date,
                                            datetime,
                                            uuid.UUID,
                                            int,
                                            float,
                                            decimal.Decimal,
                                            None,
                                            list,
                                            tuple,
                                            bytes,
                                        ],
                                    ) -> "items":
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            percentile=percentile,
                                            value=value,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )

                            def __new__(
                                cls,
                                _arg: typing.Union[
                                    typing.Tuple[
                                        typing.Union[
                                            MetaOapg.items,
                                            dict,
                                            frozendict.frozendict,
                                        ]
                                    ],
                                    typing.List[
                                        typing.Union[
                                            MetaOapg.items,
                                            dict,
                                            frozendict.frozendict,
                                        ]
                                    ],
                                ],
                                _configuration: typing.Optional[
                                    schemas.Configuration
                                ] = None,
                            ) -> "last_hits_per_min":
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )

                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)

                        class hero_damage_per_min(schemas.ListSchema):
                            class MetaOapg:
                                class items(schemas.DictSchema):
                                    class MetaOapg:
                                        class properties:
                                            percentile = schemas.NumberSchema
                                            value = schemas.IntSchema
                                            __annotations__ = {
                                                "percentile": percentile,
                                                "value": value,
                                            }

                                    @typing.overload
                                    def __getitem__(
                                        self,
                                        name: typing_extensions.Literal["percentile"],
                                    ) -> MetaOapg.properties.percentile:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self, name: typing_extensions.Literal["value"]
                                    ) -> MetaOapg.properties.value:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self, name: str
                                    ) -> schemas.UnsetAnyTypeSchema:
                                        ...

                                    def __getitem__(
                                        self,
                                        name: typing.Union[
                                            typing_extensions.Literal[
                                                "percentile",
                                                "value",
                                            ],
                                            str,
                                        ],
                                    ):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)

                                    @typing.overload
                                    def get_item_oapg(
                                        self,
                                        name: typing_extensions.Literal["percentile"],
                                    ) -> typing.Union[
                                        MetaOapg.properties.percentile, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: typing_extensions.Literal["value"]
                                    ) -> typing.Union[
                                        MetaOapg.properties.value, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: str
                                    ) -> typing.Union[
                                        schemas.UnsetAnyTypeSchema, schemas.Unset
                                    ]:
                                        ...

                                    def get_item_oapg(
                                        self,
                                        name: typing.Union[
                                            typing_extensions.Literal[
                                                "percentile",
                                                "value",
                                            ],
                                            str,
                                        ],
                                    ):
                                        return super().get_item_oapg(name)

                                    def __new__(
                                        cls,
                                        *_args: typing.Union[
                                            dict,
                                            frozendict.frozendict,
                                        ],
                                        percentile: typing.Union[
                                            MetaOapg.properties.percentile,
                                            decimal.Decimal,
                                            int,
                                            float,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        value: typing.Union[
                                            MetaOapg.properties.value,
                                            decimal.Decimal,
                                            int,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        _configuration: typing.Optional[
                                            schemas.Configuration
                                        ] = None,
                                        **kwargs: typing.Union[
                                            schemas.AnyTypeSchema,
                                            dict,
                                            frozendict.frozendict,
                                            str,
                                            date,
                                            datetime,
                                            uuid.UUID,
                                            int,
                                            float,
                                            decimal.Decimal,
                                            None,
                                            list,
                                            tuple,
                                            bytes,
                                        ],
                                    ) -> "items":
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            percentile=percentile,
                                            value=value,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )

                            def __new__(
                                cls,
                                _arg: typing.Union[
                                    typing.Tuple[
                                        typing.Union[
                                            MetaOapg.items,
                                            dict,
                                            frozendict.frozendict,
                                        ]
                                    ],
                                    typing.List[
                                        typing.Union[
                                            MetaOapg.items,
                                            dict,
                                            frozendict.frozendict,
                                        ]
                                    ],
                                ],
                                _configuration: typing.Optional[
                                    schemas.Configuration
                                ] = None,
                            ) -> "hero_damage_per_min":
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )

                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)

                        class hero_healing_per_min(schemas.ListSchema):
                            class MetaOapg:
                                class items(schemas.DictSchema):
                                    class MetaOapg:
                                        class properties:
                                            percentile = schemas.NumberSchema
                                            value = schemas.IntSchema
                                            __annotations__ = {
                                                "percentile": percentile,
                                                "value": value,
                                            }

                                    @typing.overload
                                    def __getitem__(
                                        self,
                                        name: typing_extensions.Literal["percentile"],
                                    ) -> MetaOapg.properties.percentile:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self, name: typing_extensions.Literal["value"]
                                    ) -> MetaOapg.properties.value:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self, name: str
                                    ) -> schemas.UnsetAnyTypeSchema:
                                        ...

                                    def __getitem__(
                                        self,
                                        name: typing.Union[
                                            typing_extensions.Literal[
                                                "percentile",
                                                "value",
                                            ],
                                            str,
                                        ],
                                    ):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)

                                    @typing.overload
                                    def get_item_oapg(
                                        self,
                                        name: typing_extensions.Literal["percentile"],
                                    ) -> typing.Union[
                                        MetaOapg.properties.percentile, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: typing_extensions.Literal["value"]
                                    ) -> typing.Union[
                                        MetaOapg.properties.value, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: str
                                    ) -> typing.Union[
                                        schemas.UnsetAnyTypeSchema, schemas.Unset
                                    ]:
                                        ...

                                    def get_item_oapg(
                                        self,
                                        name: typing.Union[
                                            typing_extensions.Literal[
                                                "percentile",
                                                "value",
                                            ],
                                            str,
                                        ],
                                    ):
                                        return super().get_item_oapg(name)

                                    def __new__(
                                        cls,
                                        *_args: typing.Union[
                                            dict,
                                            frozendict.frozendict,
                                        ],
                                        percentile: typing.Union[
                                            MetaOapg.properties.percentile,
                                            decimal.Decimal,
                                            int,
                                            float,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        value: typing.Union[
                                            MetaOapg.properties.value,
                                            decimal.Decimal,
                                            int,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        _configuration: typing.Optional[
                                            schemas.Configuration
                                        ] = None,
                                        **kwargs: typing.Union[
                                            schemas.AnyTypeSchema,
                                            dict,
                                            frozendict.frozendict,
                                            str,
                                            date,
                                            datetime,
                                            uuid.UUID,
                                            int,
                                            float,
                                            decimal.Decimal,
                                            None,
                                            list,
                                            tuple,
                                            bytes,
                                        ],
                                    ) -> "items":
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            percentile=percentile,
                                            value=value,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )

                            def __new__(
                                cls,
                                _arg: typing.Union[
                                    typing.Tuple[
                                        typing.Union[
                                            MetaOapg.items,
                                            dict,
                                            frozendict.frozendict,
                                        ]
                                    ],
                                    typing.List[
                                        typing.Union[
                                            MetaOapg.items,
                                            dict,
                                            frozendict.frozendict,
                                        ]
                                    ],
                                ],
                                _configuration: typing.Optional[
                                    schemas.Configuration
                                ] = None,
                            ) -> "hero_healing_per_min":
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )

                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)

                        class tower_damage(schemas.ListSchema):
                            class MetaOapg:
                                class items(schemas.DictSchema):
                                    class MetaOapg:
                                        class properties:
                                            percentile = schemas.NumberSchema
                                            value = schemas.IntSchema
                                            __annotations__ = {
                                                "percentile": percentile,
                                                "value": value,
                                            }

                                    @typing.overload
                                    def __getitem__(
                                        self,
                                        name: typing_extensions.Literal["percentile"],
                                    ) -> MetaOapg.properties.percentile:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self, name: typing_extensions.Literal["value"]
                                    ) -> MetaOapg.properties.value:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self, name: str
                                    ) -> schemas.UnsetAnyTypeSchema:
                                        ...

                                    def __getitem__(
                                        self,
                                        name: typing.Union[
                                            typing_extensions.Literal[
                                                "percentile",
                                                "value",
                                            ],
                                            str,
                                        ],
                                    ):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)

                                    @typing.overload
                                    def get_item_oapg(
                                        self,
                                        name: typing_extensions.Literal["percentile"],
                                    ) -> typing.Union[
                                        MetaOapg.properties.percentile, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: typing_extensions.Literal["value"]
                                    ) -> typing.Union[
                                        MetaOapg.properties.value, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: str
                                    ) -> typing.Union[
                                        schemas.UnsetAnyTypeSchema, schemas.Unset
                                    ]:
                                        ...

                                    def get_item_oapg(
                                        self,
                                        name: typing.Union[
                                            typing_extensions.Literal[
                                                "percentile",
                                                "value",
                                            ],
                                            str,
                                        ],
                                    ):
                                        return super().get_item_oapg(name)

                                    def __new__(
                                        cls,
                                        *_args: typing.Union[
                                            dict,
                                            frozendict.frozendict,
                                        ],
                                        percentile: typing.Union[
                                            MetaOapg.properties.percentile,
                                            decimal.Decimal,
                                            int,
                                            float,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        value: typing.Union[
                                            MetaOapg.properties.value,
                                            decimal.Decimal,
                                            int,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        _configuration: typing.Optional[
                                            schemas.Configuration
                                        ] = None,
                                        **kwargs: typing.Union[
                                            schemas.AnyTypeSchema,
                                            dict,
                                            frozendict.frozendict,
                                            str,
                                            date,
                                            datetime,
                                            uuid.UUID,
                                            int,
                                            float,
                                            decimal.Decimal,
                                            None,
                                            list,
                                            tuple,
                                            bytes,
                                        ],
                                    ) -> "items":
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            percentile=percentile,
                                            value=value,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )

                            def __new__(
                                cls,
                                _arg: typing.Union[
                                    typing.Tuple[
                                        typing.Union[
                                            MetaOapg.items,
                                            dict,
                                            frozendict.frozendict,
                                        ]
                                    ],
                                    typing.List[
                                        typing.Union[
                                            MetaOapg.items,
                                            dict,
                                            frozendict.frozendict,
                                        ]
                                    ],
                                ],
                                _configuration: typing.Optional[
                                    schemas.Configuration
                                ] = None,
                            ) -> "tower_damage":
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )

                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)

                        __annotations__ = {
                            "gold_per_min": gold_per_min,
                            "xp_per_min": xp_per_min,
                            "kills_per_min": kills_per_min,
                            "last_hits_per_min": last_hits_per_min,
                            "hero_damage_per_min": hero_damage_per_min,
                            "hero_healing_per_min": hero_healing_per_min,
                            "tower_damage": tower_damage,
                        }

                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["gold_per_min"]
                ) -> MetaOapg.properties.gold_per_min:
                    ...

                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["xp_per_min"]
                ) -> MetaOapg.properties.xp_per_min:
                    ...

                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["kills_per_min"]
                ) -> MetaOapg.properties.kills_per_min:
                    ...

                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["last_hits_per_min"]
                ) -> MetaOapg.properties.last_hits_per_min:
                    ...

                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["hero_damage_per_min"]
                ) -> MetaOapg.properties.hero_damage_per_min:
                    ...

                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["hero_healing_per_min"]
                ) -> MetaOapg.properties.hero_healing_per_min:
                    ...

                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["tower_damage"]
                ) -> MetaOapg.properties.tower_damage:
                    ...

                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
                    ...

                def __getitem__(
                    self,
                    name: typing.Union[
                        typing_extensions.Literal[
                            "gold_per_min",
                            "xp_per_min",
                            "kills_per_min",
                            "last_hits_per_min",
                            "hero_damage_per_min",
                            "hero_healing_per_min",
                            "tower_damage",
                        ],
                        str,
                    ],
                ):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)

                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["gold_per_min"]
                ) -> typing.Union[MetaOapg.properties.gold_per_min, schemas.Unset]:
                    ...

                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["xp_per_min"]
                ) -> typing.Union[MetaOapg.properties.xp_per_min, schemas.Unset]:
                    ...

                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["kills_per_min"]
                ) -> typing.Union[MetaOapg.properties.kills_per_min, schemas.Unset]:
                    ...

                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["last_hits_per_min"]
                ) -> typing.Union[MetaOapg.properties.last_hits_per_min, schemas.Unset]:
                    ...

                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["hero_damage_per_min"]
                ) -> typing.Union[
                    MetaOapg.properties.hero_damage_per_min, schemas.Unset
                ]:
                    ...

                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["hero_healing_per_min"]
                ) -> typing.Union[
                    MetaOapg.properties.hero_healing_per_min, schemas.Unset
                ]:
                    ...

                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["tower_damage"]
                ) -> typing.Union[MetaOapg.properties.tower_damage, schemas.Unset]:
                    ...

                @typing.overload
                def get_item_oapg(
                    self, name: str
                ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
                    ...

                def get_item_oapg(
                    self,
                    name: typing.Union[
                        typing_extensions.Literal[
                            "gold_per_min",
                            "xp_per_min",
                            "kills_per_min",
                            "last_hits_per_min",
                            "hero_damage_per_min",
                            "hero_healing_per_min",
                            "tower_damage",
                        ],
                        str,
                    ],
                ):
                    return super().get_item_oapg(name)

                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                    ],
                    gold_per_min: typing.Union[
                        MetaOapg.properties.gold_per_min, list, tuple, schemas.Unset
                    ] = schemas.unset,
                    xp_per_min: typing.Union[
                        MetaOapg.properties.xp_per_min, list, tuple, schemas.Unset
                    ] = schemas.unset,
                    kills_per_min: typing.Union[
                        MetaOapg.properties.kills_per_min, list, tuple, schemas.Unset
                    ] = schemas.unset,
                    last_hits_per_min: typing.Union[
                        MetaOapg.properties.last_hits_per_min,
                        list,
                        tuple,
                        schemas.Unset,
                    ] = schemas.unset,
                    hero_damage_per_min: typing.Union[
                        MetaOapg.properties.hero_damage_per_min,
                        list,
                        tuple,
                        schemas.Unset,
                    ] = schemas.unset,
                    hero_healing_per_min: typing.Union[
                        MetaOapg.properties.hero_healing_per_min,
                        list,
                        tuple,
                        schemas.Unset,
                    ] = schemas.unset,
                    tower_damage: typing.Union[
                        MetaOapg.properties.tower_damage, list, tuple, schemas.Unset
                    ] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[
                        schemas.AnyTypeSchema,
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        None,
                        list,
                        tuple,
                        bytes,
                    ],
                ) -> "result":
                    return super().__new__(
                        cls,
                        *_args,
                        gold_per_min=gold_per_min,
                        xp_per_min=xp_per_min,
                        kills_per_min=kills_per_min,
                        last_hits_per_min=last_hits_per_min,
                        hero_damage_per_min=hero_damage_per_min,
                        hero_healing_per_min=hero_healing_per_min,
                        tower_damage=tower_damage,
                        _configuration=_configuration,
                        **kwargs,
                    )

            __annotations__ = {
                "hero_id": hero_id,
                "result": result,
            }

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["hero_id"]
    ) -> MetaOapg.properties.hero_id:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["result"]
    ) -> MetaOapg.properties.result:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "hero_id",
                "result",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["hero_id"]
    ) -> typing.Union[MetaOapg.properties.hero_id, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["result"]
    ) -> typing.Union[MetaOapg.properties.result, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "hero_id",
                "result",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        hero_id: typing.Union[
            MetaOapg.properties.hero_id, decimal.Decimal, int, schemas.Unset
        ] = schemas.unset,
        result: typing.Union[
            MetaOapg.properties.result, dict, frozendict.frozendict, schemas.Unset
        ] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "SchemaFor200ResponseBodyApplicationJson":
        return super().__new__(
            cls,
            *_args,
            hero_id=hero_id,
            result=result,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        "application/json": api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson
        ),
    },
)
_status_code_to_response = {
    "200": _response_for_200,
}
_all_accept_content_types = ("application/json",)


class BaseApi(api_client.Api):
    @typing.overload
    def _benchmarks_get_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[ApiResponseFor200,]:
        ...

    @typing.overload
    def _benchmarks_get_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization:
        ...

    @typing.overload
    def _benchmarks_get_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[ApiResponseFor200, api_client.ApiResponseWithoutDeserialization,]:
        ...

    def _benchmarks_get_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        GET /benchmarks
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (request_query_hero_id,):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(
                parameter_data, prefix_separator_iterator
            )
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add("Accept", accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method="get".upper(),
            headers=_headers,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(
                response=response
            )
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(
                    response, self.api_client.configuration
                )
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(
                    response=response
                )

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response,
            )

        return api_response


class BenchmarksGet(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def benchmarks_get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[ApiResponseFor200,]:
        ...

    @typing.overload
    def benchmarks_get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization:
        ...

    @typing.overload
    def benchmarks_get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[ApiResponseFor200, api_client.ApiResponseWithoutDeserialization,]:
        ...

    def benchmarks_get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._benchmarks_get_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization,
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[ApiResponseFor200,]:
        ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization:
        ...

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[ApiResponseFor200, api_client.ApiResponseWithoutDeserialization,]:
        ...

    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._benchmarks_get_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization,
        )
