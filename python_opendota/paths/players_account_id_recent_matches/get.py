# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from python_opendota import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from python_opendota import schemas  # noqa: F401

from . import path

# Path params
AccountIdSchema = schemas.IntSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    "RequestRequiredPathParams",
    {
        "account_id": typing.Union[
            AccountIdSchema,
            decimal.Decimal,
            int,
        ],
    },
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    "RequestOptionalPathParams", {}, total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_account_id = api_client.PathParameter(
    name="account_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=AccountIdSchema,
    required=True,
)


class SchemaFor200ResponseBodyApplicationJson(schemas.ListSchema):
    class MetaOapg:
        class items(schemas.DictSchema):
            class MetaOapg:
                class properties:
                    match_id = schemas.IntSchema
                    player_slot = schemas.IntSchema
                    radiant_win = schemas.BoolSchema
                    duration = schemas.IntSchema
                    game_mode = schemas.IntSchema
                    lobby_type = schemas.IntSchema
                    hero_id = schemas.IntSchema
                    start_time = schemas.IntSchema
                    version = schemas.IntSchema
                    kills = schemas.IntSchema
                    deaths = schemas.IntSchema
                    assists = schemas.IntSchema
                    skill = schemas.IntSchema
                    average_rank = schemas.IntSchema
                    xp_per_min = schemas.IntSchema
                    gold_per_min = schemas.IntSchema
                    hero_damage = schemas.IntSchema
                    hero_healing = schemas.IntSchema
                    last_hits = schemas.IntSchema
                    lane = schemas.IntSchema
                    lane_role = schemas.IntSchema
                    is_roaming = schemas.BoolSchema
                    cluster = schemas.IntSchema
                    leaver_status = schemas.IntSchema
                    party_size = schemas.IntSchema
                    __annotations__ = {
                        "match_id": match_id,
                        "player_slot": player_slot,
                        "radiant_win": radiant_win,
                        "duration": duration,
                        "game_mode": game_mode,
                        "lobby_type": lobby_type,
                        "hero_id": hero_id,
                        "start_time": start_time,
                        "version": version,
                        "kills": kills,
                        "deaths": deaths,
                        "assists": assists,
                        "skill": skill,
                        "average_rank": average_rank,
                        "xp_per_min": xp_per_min,
                        "gold_per_min": gold_per_min,
                        "hero_damage": hero_damage,
                        "hero_healing": hero_healing,
                        "last_hits": last_hits,
                        "lane": lane,
                        "lane_role": lane_role,
                        "is_roaming": is_roaming,
                        "cluster": cluster,
                        "leaver_status": leaver_status,
                        "party_size": party_size,
                    }

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["match_id"]
            ) -> MetaOapg.properties.match_id:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["player_slot"]
            ) -> MetaOapg.properties.player_slot:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["radiant_win"]
            ) -> MetaOapg.properties.radiant_win:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["duration"]
            ) -> MetaOapg.properties.duration:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["game_mode"]
            ) -> MetaOapg.properties.game_mode:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["lobby_type"]
            ) -> MetaOapg.properties.lobby_type:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["hero_id"]
            ) -> MetaOapg.properties.hero_id:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["start_time"]
            ) -> MetaOapg.properties.start_time:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["version"]
            ) -> MetaOapg.properties.version:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["kills"]
            ) -> MetaOapg.properties.kills:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["deaths"]
            ) -> MetaOapg.properties.deaths:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["assists"]
            ) -> MetaOapg.properties.assists:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["skill"]
            ) -> MetaOapg.properties.skill:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["average_rank"]
            ) -> MetaOapg.properties.average_rank:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["xp_per_min"]
            ) -> MetaOapg.properties.xp_per_min:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["gold_per_min"]
            ) -> MetaOapg.properties.gold_per_min:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["hero_damage"]
            ) -> MetaOapg.properties.hero_damage:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["hero_healing"]
            ) -> MetaOapg.properties.hero_healing:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["last_hits"]
            ) -> MetaOapg.properties.last_hits:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["lane"]
            ) -> MetaOapg.properties.lane:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["lane_role"]
            ) -> MetaOapg.properties.lane_role:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["is_roaming"]
            ) -> MetaOapg.properties.is_roaming:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["cluster"]
            ) -> MetaOapg.properties.cluster:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["leaver_status"]
            ) -> MetaOapg.properties.leaver_status:
                ...

            @typing.overload
            def __getitem__(
                self, name: typing_extensions.Literal["party_size"]
            ) -> MetaOapg.properties.party_size:
                ...

            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
                ...

            def __getitem__(
                self,
                name: typing.Union[
                    typing_extensions.Literal[
                        "match_id",
                        "player_slot",
                        "radiant_win",
                        "duration",
                        "game_mode",
                        "lobby_type",
                        "hero_id",
                        "start_time",
                        "version",
                        "kills",
                        "deaths",
                        "assists",
                        "skill",
                        "average_rank",
                        "xp_per_min",
                        "gold_per_min",
                        "hero_damage",
                        "hero_healing",
                        "last_hits",
                        "lane",
                        "lane_role",
                        "is_roaming",
                        "cluster",
                        "leaver_status",
                        "party_size",
                    ],
                    str,
                ],
            ):
                # dict_instance[name] accessor
                return super().__getitem__(name)

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["match_id"]
            ) -> typing.Union[MetaOapg.properties.match_id, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["player_slot"]
            ) -> typing.Union[MetaOapg.properties.player_slot, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["radiant_win"]
            ) -> typing.Union[MetaOapg.properties.radiant_win, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["duration"]
            ) -> typing.Union[MetaOapg.properties.duration, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["game_mode"]
            ) -> typing.Union[MetaOapg.properties.game_mode, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["lobby_type"]
            ) -> typing.Union[MetaOapg.properties.lobby_type, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["hero_id"]
            ) -> typing.Union[MetaOapg.properties.hero_id, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["start_time"]
            ) -> typing.Union[MetaOapg.properties.start_time, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["version"]
            ) -> typing.Union[MetaOapg.properties.version, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["kills"]
            ) -> typing.Union[MetaOapg.properties.kills, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["deaths"]
            ) -> typing.Union[MetaOapg.properties.deaths, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["assists"]
            ) -> typing.Union[MetaOapg.properties.assists, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["skill"]
            ) -> typing.Union[MetaOapg.properties.skill, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["average_rank"]
            ) -> typing.Union[MetaOapg.properties.average_rank, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["xp_per_min"]
            ) -> typing.Union[MetaOapg.properties.xp_per_min, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["gold_per_min"]
            ) -> typing.Union[MetaOapg.properties.gold_per_min, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["hero_damage"]
            ) -> typing.Union[MetaOapg.properties.hero_damage, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["hero_healing"]
            ) -> typing.Union[MetaOapg.properties.hero_healing, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["last_hits"]
            ) -> typing.Union[MetaOapg.properties.last_hits, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["lane"]
            ) -> typing.Union[MetaOapg.properties.lane, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["lane_role"]
            ) -> typing.Union[MetaOapg.properties.lane_role, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["is_roaming"]
            ) -> typing.Union[MetaOapg.properties.is_roaming, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["cluster"]
            ) -> typing.Union[MetaOapg.properties.cluster, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["leaver_status"]
            ) -> typing.Union[MetaOapg.properties.leaver_status, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: typing_extensions.Literal["party_size"]
            ) -> typing.Union[MetaOapg.properties.party_size, schemas.Unset]:
                ...

            @typing.overload
            def get_item_oapg(
                self, name: str
            ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
                ...

            def get_item_oapg(
                self,
                name: typing.Union[
                    typing_extensions.Literal[
                        "match_id",
                        "player_slot",
                        "radiant_win",
                        "duration",
                        "game_mode",
                        "lobby_type",
                        "hero_id",
                        "start_time",
                        "version",
                        "kills",
                        "deaths",
                        "assists",
                        "skill",
                        "average_rank",
                        "xp_per_min",
                        "gold_per_min",
                        "hero_damage",
                        "hero_healing",
                        "last_hits",
                        "lane",
                        "lane_role",
                        "is_roaming",
                        "cluster",
                        "leaver_status",
                        "party_size",
                    ],
                    str,
                ],
            ):
                return super().get_item_oapg(name)

            def __new__(
                cls,
                *_args: typing.Union[
                    dict,
                    frozendict.frozendict,
                ],
                match_id: typing.Union[
                    MetaOapg.properties.match_id, decimal.Decimal, int, schemas.Unset
                ] = schemas.unset,
                player_slot: typing.Union[
                    MetaOapg.properties.player_slot, decimal.Decimal, int, schemas.Unset
                ] = schemas.unset,
                radiant_win: typing.Union[
                    MetaOapg.properties.radiant_win, bool, schemas.Unset
                ] = schemas.unset,
                duration: typing.Union[
                    MetaOapg.properties.duration, decimal.Decimal, int, schemas.Unset
                ] = schemas.unset,
                game_mode: typing.Union[
                    MetaOapg.properties.game_mode, decimal.Decimal, int, schemas.Unset
                ] = schemas.unset,
                lobby_type: typing.Union[
                    MetaOapg.properties.lobby_type, decimal.Decimal, int, schemas.Unset
                ] = schemas.unset,
                hero_id: typing.Union[
                    MetaOapg.properties.hero_id, decimal.Decimal, int, schemas.Unset
                ] = schemas.unset,
                start_time: typing.Union[
                    MetaOapg.properties.start_time, decimal.Decimal, int, schemas.Unset
                ] = schemas.unset,
                version: typing.Union[
                    MetaOapg.properties.version, decimal.Decimal, int, schemas.Unset
                ] = schemas.unset,
                kills: typing.Union[
                    MetaOapg.properties.kills, decimal.Decimal, int, schemas.Unset
                ] = schemas.unset,
                deaths: typing.Union[
                    MetaOapg.properties.deaths, decimal.Decimal, int, schemas.Unset
                ] = schemas.unset,
                assists: typing.Union[
                    MetaOapg.properties.assists, decimal.Decimal, int, schemas.Unset
                ] = schemas.unset,
                skill: typing.Union[
                    MetaOapg.properties.skill, decimal.Decimal, int, schemas.Unset
                ] = schemas.unset,
                average_rank: typing.Union[
                    MetaOapg.properties.average_rank,
                    decimal.Decimal,
                    int,
                    schemas.Unset,
                ] = schemas.unset,
                xp_per_min: typing.Union[
                    MetaOapg.properties.xp_per_min, decimal.Decimal, int, schemas.Unset
                ] = schemas.unset,
                gold_per_min: typing.Union[
                    MetaOapg.properties.gold_per_min,
                    decimal.Decimal,
                    int,
                    schemas.Unset,
                ] = schemas.unset,
                hero_damage: typing.Union[
                    MetaOapg.properties.hero_damage, decimal.Decimal, int, schemas.Unset
                ] = schemas.unset,
                hero_healing: typing.Union[
                    MetaOapg.properties.hero_healing,
                    decimal.Decimal,
                    int,
                    schemas.Unset,
                ] = schemas.unset,
                last_hits: typing.Union[
                    MetaOapg.properties.last_hits, decimal.Decimal, int, schemas.Unset
                ] = schemas.unset,
                lane: typing.Union[
                    MetaOapg.properties.lane, decimal.Decimal, int, schemas.Unset
                ] = schemas.unset,
                lane_role: typing.Union[
                    MetaOapg.properties.lane_role, decimal.Decimal, int, schemas.Unset
                ] = schemas.unset,
                is_roaming: typing.Union[
                    MetaOapg.properties.is_roaming, bool, schemas.Unset
                ] = schemas.unset,
                cluster: typing.Union[
                    MetaOapg.properties.cluster, decimal.Decimal, int, schemas.Unset
                ] = schemas.unset,
                leaver_status: typing.Union[
                    MetaOapg.properties.leaver_status,
                    decimal.Decimal,
                    int,
                    schemas.Unset,
                ] = schemas.unset,
                party_size: typing.Union[
                    MetaOapg.properties.party_size, decimal.Decimal, int, schemas.Unset
                ] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[
                    schemas.AnyTypeSchema,
                    dict,
                    frozendict.frozendict,
                    str,
                    date,
                    datetime,
                    uuid.UUID,
                    int,
                    float,
                    decimal.Decimal,
                    None,
                    list,
                    tuple,
                    bytes,
                ],
            ) -> "items":
                return super().__new__(
                    cls,
                    *_args,
                    match_id=match_id,
                    player_slot=player_slot,
                    radiant_win=radiant_win,
                    duration=duration,
                    game_mode=game_mode,
                    lobby_type=lobby_type,
                    hero_id=hero_id,
                    start_time=start_time,
                    version=version,
                    kills=kills,
                    deaths=deaths,
                    assists=assists,
                    skill=skill,
                    average_rank=average_rank,
                    xp_per_min=xp_per_min,
                    gold_per_min=gold_per_min,
                    hero_damage=hero_damage,
                    hero_healing=hero_healing,
                    last_hits=last_hits,
                    lane=lane,
                    lane_role=lane_role,
                    is_roaming=is_roaming,
                    cluster=cluster,
                    leaver_status=leaver_status,
                    party_size=party_size,
                    _configuration=_configuration,
                    **kwargs,
                )

    def __new__(
        cls,
        _arg: typing.Union[
            typing.Tuple[
                typing.Union[
                    MetaOapg.items,
                    dict,
                    frozendict.frozendict,
                ]
            ],
            typing.List[
                typing.Union[
                    MetaOapg.items,
                    dict,
                    frozendict.frozendict,
                ]
            ],
        ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> "SchemaFor200ResponseBodyApplicationJson":
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        "application/json": api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson
        ),
    },
)
_status_code_to_response = {
    "200": _response_for_200,
}
_all_accept_content_types = ("application/json",)


class BaseApi(api_client.Api):
    @typing.overload
    def _players_account_id_recent_matches_get_oapg(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[ApiResponseFor200,]:
        ...

    @typing.overload
    def _players_account_id_recent_matches_get_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization:
        ...

    @typing.overload
    def _players_account_id_recent_matches_get_oapg(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[ApiResponseFor200, api_client.ApiResponseWithoutDeserialization,]:
        ...

    def _players_account_id_recent_matches_get_oapg(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        GET /players/{account_id}/recentMatches
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value

        _path_params = {}
        for parameter in (request_path_account_id,):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        for k, v in _path_params.items():
            used_path = used_path.replace("{%s}" % k, v)

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add("Accept", accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method="get".upper(),
            headers=_headers,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(
                response=response
            )
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(
                    response, self.api_client.configuration
                )
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(
                    response=response
                )

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response,
            )

        return api_response


class PlayersAccountIdRecentMatchesGet(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def players_account_id_recent_matches_get(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[ApiResponseFor200,]:
        ...

    @typing.overload
    def players_account_id_recent_matches_get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization:
        ...

    @typing.overload
    def players_account_id_recent_matches_get(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[ApiResponseFor200, api_client.ApiResponseWithoutDeserialization,]:
        ...

    def players_account_id_recent_matches_get(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._players_account_id_recent_matches_get_oapg(
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization,
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[ApiResponseFor200,]:
        ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization:
        ...

    @typing.overload
    def get(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[ApiResponseFor200, api_client.ApiResponseWithoutDeserialization,]:
        ...

    def get(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._players_account_id_recent_matches_get_oapg(
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization,
        )
