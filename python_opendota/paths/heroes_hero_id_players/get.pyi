# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from python_opendota import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from python_opendota import schemas  # noqa: F401

# Path params
HeroIdSchema = schemas.IntSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    "RequestRequiredPathParams",
    {
        "hero_id": typing.Union[
            HeroIdSchema,
            decimal.Decimal,
            int,
        ],
    },
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    "RequestOptionalPathParams", {}, total=False
)

class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass

request_path_hero_id = api_client.PathParameter(
    name="hero_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=HeroIdSchema,
    required=True,
)

class SchemaFor200ResponseBodyApplicationJson(schemas.ListSchema):
    class MetaOapg:
        class items(schemas.ListSchema):
            class MetaOapg:
                class items(schemas.DictSchema):
                    class MetaOapg:
                        class properties:
                            account_id = schemas.IntSchema
                            steamid = schemas.StrSchema
                            avatar = schemas.StrSchema
                            avatarmedium = schemas.StrSchema
                            avatarfull = schemas.StrSchema
                            profileurl = schemas.StrSchema
                            personaname = schemas.StrSchema
                            last_login = schemas.DateTimeSchema
                            full_history_time = schemas.DateTimeSchema
                            cheese = schemas.IntSchema
                            fh_unavailable = schemas.BoolSchema
                            loccountrycode = schemas.StrSchema
                            name = schemas.StrSchema
                            country_code = schemas.StrSchema
                            fantasy_role = schemas.IntSchema
                            team_id = schemas.IntSchema
                            team_name = schemas.StrSchema
                            team_tag = schemas.StrSchema
                            is_locked = schemas.BoolSchema
                            is_pro = schemas.BoolSchema
                            locked_until = schemas.IntSchema
                            __annotations__ = {
                                "account_id": account_id,
                                "steamid": steamid,
                                "avatar": avatar,
                                "avatarmedium": avatarmedium,
                                "avatarfull": avatarfull,
                                "profileurl": profileurl,
                                "personaname": personaname,
                                "last_login": last_login,
                                "full_history_time": full_history_time,
                                "cheese": cheese,
                                "fh_unavailable": fh_unavailable,
                                "loccountrycode": loccountrycode,
                                "name": name,
                                "country_code": country_code,
                                "fantasy_role": fantasy_role,
                                "team_id": team_id,
                                "team_name": team_name,
                                "team_tag": team_tag,
                                "is_locked": is_locked,
                                "is_pro": is_pro,
                                "locked_until": locked_until,
                            }
                    @typing.overload
                    def __getitem__(
                        self, name: typing_extensions.Literal["account_id"]
                    ) -> MetaOapg.properties.account_id: ...
                    @typing.overload
                    def __getitem__(
                        self, name: typing_extensions.Literal["steamid"]
                    ) -> MetaOapg.properties.steamid: ...
                    @typing.overload
                    def __getitem__(
                        self, name: typing_extensions.Literal["avatar"]
                    ) -> MetaOapg.properties.avatar: ...
                    @typing.overload
                    def __getitem__(
                        self, name: typing_extensions.Literal["avatarmedium"]
                    ) -> MetaOapg.properties.avatarmedium: ...
                    @typing.overload
                    def __getitem__(
                        self, name: typing_extensions.Literal["avatarfull"]
                    ) -> MetaOapg.properties.avatarfull: ...
                    @typing.overload
                    def __getitem__(
                        self, name: typing_extensions.Literal["profileurl"]
                    ) -> MetaOapg.properties.profileurl: ...
                    @typing.overload
                    def __getitem__(
                        self, name: typing_extensions.Literal["personaname"]
                    ) -> MetaOapg.properties.personaname: ...
                    @typing.overload
                    def __getitem__(
                        self, name: typing_extensions.Literal["last_login"]
                    ) -> MetaOapg.properties.last_login: ...
                    @typing.overload
                    def __getitem__(
                        self, name: typing_extensions.Literal["full_history_time"]
                    ) -> MetaOapg.properties.full_history_time: ...
                    @typing.overload
                    def __getitem__(
                        self, name: typing_extensions.Literal["cheese"]
                    ) -> MetaOapg.properties.cheese: ...
                    @typing.overload
                    def __getitem__(
                        self, name: typing_extensions.Literal["fh_unavailable"]
                    ) -> MetaOapg.properties.fh_unavailable: ...
                    @typing.overload
                    def __getitem__(
                        self, name: typing_extensions.Literal["loccountrycode"]
                    ) -> MetaOapg.properties.loccountrycode: ...
                    @typing.overload
                    def __getitem__(
                        self, name: typing_extensions.Literal["name"]
                    ) -> MetaOapg.properties.name: ...
                    @typing.overload
                    def __getitem__(
                        self, name: typing_extensions.Literal["country_code"]
                    ) -> MetaOapg.properties.country_code: ...
                    @typing.overload
                    def __getitem__(
                        self, name: typing_extensions.Literal["fantasy_role"]
                    ) -> MetaOapg.properties.fantasy_role: ...
                    @typing.overload
                    def __getitem__(
                        self, name: typing_extensions.Literal["team_id"]
                    ) -> MetaOapg.properties.team_id: ...
                    @typing.overload
                    def __getitem__(
                        self, name: typing_extensions.Literal["team_name"]
                    ) -> MetaOapg.properties.team_name: ...
                    @typing.overload
                    def __getitem__(
                        self, name: typing_extensions.Literal["team_tag"]
                    ) -> MetaOapg.properties.team_tag: ...
                    @typing.overload
                    def __getitem__(
                        self, name: typing_extensions.Literal["is_locked"]
                    ) -> MetaOapg.properties.is_locked: ...
                    @typing.overload
                    def __getitem__(
                        self, name: typing_extensions.Literal["is_pro"]
                    ) -> MetaOapg.properties.is_pro: ...
                    @typing.overload
                    def __getitem__(
                        self, name: typing_extensions.Literal["locked_until"]
                    ) -> MetaOapg.properties.locked_until: ...
                    @typing.overload
                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                    def __getitem__(
                        self,
                        name: typing.Union[
                            typing_extensions.Literal[
                                "account_id",
                                "steamid",
                                "avatar",
                                "avatarmedium",
                                "avatarfull",
                                "profileurl",
                                "personaname",
                                "last_login",
                                "full_history_time",
                                "cheese",
                                "fh_unavailable",
                                "loccountrycode",
                                "name",
                                "country_code",
                                "fantasy_role",
                                "team_id",
                                "team_name",
                                "team_tag",
                                "is_locked",
                                "is_pro",
                                "locked_until",
                            ],
                            str,
                        ],
                    ):
                        # dict_instance[name] accessor
                        return super().__getitem__(name)
                    @typing.overload
                    def get_item_oapg(
                        self, name: typing_extensions.Literal["account_id"]
                    ) -> typing.Union[
                        MetaOapg.properties.account_id, schemas.Unset
                    ]: ...
                    @typing.overload
                    def get_item_oapg(
                        self, name: typing_extensions.Literal["steamid"]
                    ) -> typing.Union[MetaOapg.properties.steamid, schemas.Unset]: ...
                    @typing.overload
                    def get_item_oapg(
                        self, name: typing_extensions.Literal["avatar"]
                    ) -> typing.Union[MetaOapg.properties.avatar, schemas.Unset]: ...
                    @typing.overload
                    def get_item_oapg(
                        self, name: typing_extensions.Literal["avatarmedium"]
                    ) -> typing.Union[
                        MetaOapg.properties.avatarmedium, schemas.Unset
                    ]: ...
                    @typing.overload
                    def get_item_oapg(
                        self, name: typing_extensions.Literal["avatarfull"]
                    ) -> typing.Union[
                        MetaOapg.properties.avatarfull, schemas.Unset
                    ]: ...
                    @typing.overload
                    def get_item_oapg(
                        self, name: typing_extensions.Literal["profileurl"]
                    ) -> typing.Union[
                        MetaOapg.properties.profileurl, schemas.Unset
                    ]: ...
                    @typing.overload
                    def get_item_oapg(
                        self, name: typing_extensions.Literal["personaname"]
                    ) -> typing.Union[
                        MetaOapg.properties.personaname, schemas.Unset
                    ]: ...
                    @typing.overload
                    def get_item_oapg(
                        self, name: typing_extensions.Literal["last_login"]
                    ) -> typing.Union[
                        MetaOapg.properties.last_login, schemas.Unset
                    ]: ...
                    @typing.overload
                    def get_item_oapg(
                        self, name: typing_extensions.Literal["full_history_time"]
                    ) -> typing.Union[
                        MetaOapg.properties.full_history_time, schemas.Unset
                    ]: ...
                    @typing.overload
                    def get_item_oapg(
                        self, name: typing_extensions.Literal["cheese"]
                    ) -> typing.Union[MetaOapg.properties.cheese, schemas.Unset]: ...
                    @typing.overload
                    def get_item_oapg(
                        self, name: typing_extensions.Literal["fh_unavailable"]
                    ) -> typing.Union[
                        MetaOapg.properties.fh_unavailable, schemas.Unset
                    ]: ...
                    @typing.overload
                    def get_item_oapg(
                        self, name: typing_extensions.Literal["loccountrycode"]
                    ) -> typing.Union[
                        MetaOapg.properties.loccountrycode, schemas.Unset
                    ]: ...
                    @typing.overload
                    def get_item_oapg(
                        self, name: typing_extensions.Literal["name"]
                    ) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                    @typing.overload
                    def get_item_oapg(
                        self, name: typing_extensions.Literal["country_code"]
                    ) -> typing.Union[
                        MetaOapg.properties.country_code, schemas.Unset
                    ]: ...
                    @typing.overload
                    def get_item_oapg(
                        self, name: typing_extensions.Literal["fantasy_role"]
                    ) -> typing.Union[
                        MetaOapg.properties.fantasy_role, schemas.Unset
                    ]: ...
                    @typing.overload
                    def get_item_oapg(
                        self, name: typing_extensions.Literal["team_id"]
                    ) -> typing.Union[MetaOapg.properties.team_id, schemas.Unset]: ...
                    @typing.overload
                    def get_item_oapg(
                        self, name: typing_extensions.Literal["team_name"]
                    ) -> typing.Union[MetaOapg.properties.team_name, schemas.Unset]: ...
                    @typing.overload
                    def get_item_oapg(
                        self, name: typing_extensions.Literal["team_tag"]
                    ) -> typing.Union[MetaOapg.properties.team_tag, schemas.Unset]: ...
                    @typing.overload
                    def get_item_oapg(
                        self, name: typing_extensions.Literal["is_locked"]
                    ) -> typing.Union[MetaOapg.properties.is_locked, schemas.Unset]: ...
                    @typing.overload
                    def get_item_oapg(
                        self, name: typing_extensions.Literal["is_pro"]
                    ) -> typing.Union[MetaOapg.properties.is_pro, schemas.Unset]: ...
                    @typing.overload
                    def get_item_oapg(
                        self, name: typing_extensions.Literal["locked_until"]
                    ) -> typing.Union[
                        MetaOapg.properties.locked_until, schemas.Unset
                    ]: ...
                    @typing.overload
                    def get_item_oapg(
                        self, name: str
                    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                    def get_item_oapg(
                        self,
                        name: typing.Union[
                            typing_extensions.Literal[
                                "account_id",
                                "steamid",
                                "avatar",
                                "avatarmedium",
                                "avatarfull",
                                "profileurl",
                                "personaname",
                                "last_login",
                                "full_history_time",
                                "cheese",
                                "fh_unavailable",
                                "loccountrycode",
                                "name",
                                "country_code",
                                "fantasy_role",
                                "team_id",
                                "team_name",
                                "team_tag",
                                "is_locked",
                                "is_pro",
                                "locked_until",
                            ],
                            str,
                        ],
                    ):
                        return super().get_item_oapg(name)
                    def __new__(
                        cls,
                        *_args: typing.Union[
                            dict,
                            frozendict.frozendict,
                        ],
                        account_id: typing.Union[
                            MetaOapg.properties.account_id,
                            decimal.Decimal,
                            int,
                            schemas.Unset,
                        ] = schemas.unset,
                        steamid: typing.Union[
                            MetaOapg.properties.steamid, str, schemas.Unset
                        ] = schemas.unset,
                        avatar: typing.Union[
                            MetaOapg.properties.avatar, str, schemas.Unset
                        ] = schemas.unset,
                        avatarmedium: typing.Union[
                            MetaOapg.properties.avatarmedium, str, schemas.Unset
                        ] = schemas.unset,
                        avatarfull: typing.Union[
                            MetaOapg.properties.avatarfull, str, schemas.Unset
                        ] = schemas.unset,
                        profileurl: typing.Union[
                            MetaOapg.properties.profileurl, str, schemas.Unset
                        ] = schemas.unset,
                        personaname: typing.Union[
                            MetaOapg.properties.personaname, str, schemas.Unset
                        ] = schemas.unset,
                        last_login: typing.Union[
                            MetaOapg.properties.last_login, str, datetime, schemas.Unset
                        ] = schemas.unset,
                        full_history_time: typing.Union[
                            MetaOapg.properties.full_history_time,
                            str,
                            datetime,
                            schemas.Unset,
                        ] = schemas.unset,
                        cheese: typing.Union[
                            MetaOapg.properties.cheese,
                            decimal.Decimal,
                            int,
                            schemas.Unset,
                        ] = schemas.unset,
                        fh_unavailable: typing.Union[
                            MetaOapg.properties.fh_unavailable, bool, schemas.Unset
                        ] = schemas.unset,
                        loccountrycode: typing.Union[
                            MetaOapg.properties.loccountrycode, str, schemas.Unset
                        ] = schemas.unset,
                        name: typing.Union[
                            MetaOapg.properties.name, str, schemas.Unset
                        ] = schemas.unset,
                        country_code: typing.Union[
                            MetaOapg.properties.country_code, str, schemas.Unset
                        ] = schemas.unset,
                        fantasy_role: typing.Union[
                            MetaOapg.properties.fantasy_role,
                            decimal.Decimal,
                            int,
                            schemas.Unset,
                        ] = schemas.unset,
                        team_id: typing.Union[
                            MetaOapg.properties.team_id,
                            decimal.Decimal,
                            int,
                            schemas.Unset,
                        ] = schemas.unset,
                        team_name: typing.Union[
                            MetaOapg.properties.team_name, str, schemas.Unset
                        ] = schemas.unset,
                        team_tag: typing.Union[
                            MetaOapg.properties.team_tag, str, schemas.Unset
                        ] = schemas.unset,
                        is_locked: typing.Union[
                            MetaOapg.properties.is_locked, bool, schemas.Unset
                        ] = schemas.unset,
                        is_pro: typing.Union[
                            MetaOapg.properties.is_pro, bool, schemas.Unset
                        ] = schemas.unset,
                        locked_until: typing.Union[
                            MetaOapg.properties.locked_until,
                            decimal.Decimal,
                            int,
                            schemas.Unset,
                        ] = schemas.unset,
                        _configuration: typing.Optional[schemas.Configuration] = None,
                        **kwargs: typing.Union[
                            schemas.AnyTypeSchema,
                            dict,
                            frozendict.frozendict,
                            str,
                            date,
                            datetime,
                            uuid.UUID,
                            int,
                            float,
                            decimal.Decimal,
                            None,
                            list,
                            tuple,
                            bytes,
                        ],
                    ) -> "items":
                        return super().__new__(
                            cls,
                            *_args,
                            account_id=account_id,
                            steamid=steamid,
                            avatar=avatar,
                            avatarmedium=avatarmedium,
                            avatarfull=avatarfull,
                            profileurl=profileurl,
                            personaname=personaname,
                            last_login=last_login,
                            full_history_time=full_history_time,
                            cheese=cheese,
                            fh_unavailable=fh_unavailable,
                            loccountrycode=loccountrycode,
                            name=name,
                            country_code=country_code,
                            fantasy_role=fantasy_role,
                            team_id=team_id,
                            team_name=team_name,
                            team_tag=team_tag,
                            is_locked=is_locked,
                            is_pro=is_pro,
                            locked_until=locked_until,
                            _configuration=_configuration,
                            **kwargs,
                        )
            def __new__(
                cls,
                _arg: typing.Union[
                    typing.Tuple[
                        typing.Union[
                            MetaOapg.items,
                            dict,
                            frozendict.frozendict,
                        ]
                    ],
                    typing.List[
                        typing.Union[
                            MetaOapg.items,
                            dict,
                            frozendict.frozendict,
                        ]
                    ],
                ],
                _configuration: typing.Optional[schemas.Configuration] = None,
            ) -> "items":
                return super().__new__(
                    cls,
                    _arg,
                    _configuration=_configuration,
                )
            def __getitem__(self, i: int) -> MetaOapg.items:
                return super().__getitem__(i)
    def __new__(
        cls,
        _arg: typing.Union[
            typing.Tuple[
                typing.Union[
                    MetaOapg.items,
                    list,
                    tuple,
                ]
            ],
            typing.List[
                typing.Union[
                    MetaOapg.items,
                    list,
                    tuple,
                ]
            ],
        ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> "SchemaFor200ResponseBodyApplicationJson":
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )
    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)

@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset

_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        "application/json": api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson
        ),
    },
)
_all_accept_content_types = ("application/json",)

class BaseApi(api_client.Api):
    @typing.overload
    def _heroes_hero_id_players_get_oapg(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[ApiResponseFor200,]: ...
    @typing.overload
    def _heroes_hero_id_players_get_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...
    @typing.overload
    def _heroes_hero_id_players_get_oapg(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...
    def _heroes_hero_id_players_get_oapg(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        GET /heroes/{hero_id}/players
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value

        _path_params = {}
        for parameter in (request_path_hero_id,):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        for k, v in _path_params.items():
            used_path = used_path.replace("{%s}" % k, v)

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add("Accept", accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method="get".upper(),
            headers=_headers,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(
                response=response
            )
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(
                    response, self.api_client.configuration
                )
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(
                    response=response
                )

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response,
            )

        return api_response

class HeroesHeroIdPlayersGet(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def heroes_hero_id_players_get(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[ApiResponseFor200,]: ...
    @typing.overload
    def heroes_hero_id_players_get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...
    @typing.overload
    def heroes_hero_id_players_get(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...
    def heroes_hero_id_players_get(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._heroes_hero_id_players_get_oapg(
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization,
        )

class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[ApiResponseFor200,]: ...
    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...
    @typing.overload
    def get(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...
    def get(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._heroes_hero_id_players_get_oapg(
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization,
        )
