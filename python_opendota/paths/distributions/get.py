# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from python_opendota import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from python_opendota import schemas  # noqa: F401

from . import path


class SchemaFor200ResponseBodyApplicationJson(schemas.DictSchema):
    class MetaOapg:
        class properties:
            class ranks(schemas.DictSchema):
                class MetaOapg:
                    class properties:
                        commmand = schemas.StrSchema
                        rowCount = schemas.IntSchema

                        class rows(schemas.ListSchema):
                            class MetaOapg:
                                class items(schemas.DictSchema):
                                    class MetaOapg:
                                        class properties:
                                            bin = schemas.IntSchema
                                            bin_name = schemas.IntSchema
                                            count = schemas.IntSchema
                                            cumulative_sum = schemas.IntSchema
                                            __annotations__ = {
                                                "bin": bin,
                                                "bin_name": bin_name,
                                                "count": count,
                                                "cumulative_sum": cumulative_sum,
                                            }

                                    @typing.overload
                                    def __getitem__(
                                        self, name: typing_extensions.Literal["bin"]
                                    ) -> MetaOapg.properties.bin:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self,
                                        name: typing_extensions.Literal["bin_name"],
                                    ) -> MetaOapg.properties.bin_name:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self, name: typing_extensions.Literal["count"]
                                    ) -> MetaOapg.properties.count:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self,
                                        name: typing_extensions.Literal[
                                            "cumulative_sum"
                                        ],
                                    ) -> MetaOapg.properties.cumulative_sum:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self, name: str
                                    ) -> schemas.UnsetAnyTypeSchema:
                                        ...

                                    def __getitem__(
                                        self,
                                        name: typing.Union[
                                            typing_extensions.Literal[
                                                "bin",
                                                "bin_name",
                                                "count",
                                                "cumulative_sum",
                                            ],
                                            str,
                                        ],
                                    ):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: typing_extensions.Literal["bin"]
                                    ) -> typing.Union[
                                        MetaOapg.properties.bin, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self,
                                        name: typing_extensions.Literal["bin_name"],
                                    ) -> typing.Union[
                                        MetaOapg.properties.bin_name, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: typing_extensions.Literal["count"]
                                    ) -> typing.Union[
                                        MetaOapg.properties.count, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self,
                                        name: typing_extensions.Literal[
                                            "cumulative_sum"
                                        ],
                                    ) -> typing.Union[
                                        MetaOapg.properties.cumulative_sum,
                                        schemas.Unset,
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: str
                                    ) -> typing.Union[
                                        schemas.UnsetAnyTypeSchema, schemas.Unset
                                    ]:
                                        ...

                                    def get_item_oapg(
                                        self,
                                        name: typing.Union[
                                            typing_extensions.Literal[
                                                "bin",
                                                "bin_name",
                                                "count",
                                                "cumulative_sum",
                                            ],
                                            str,
                                        ],
                                    ):
                                        return super().get_item_oapg(name)

                                    def __new__(
                                        cls,
                                        *_args: typing.Union[
                                            dict,
                                            frozendict.frozendict,
                                        ],
                                        bin: typing.Union[
                                            MetaOapg.properties.bin,
                                            decimal.Decimal,
                                            int,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        bin_name: typing.Union[
                                            MetaOapg.properties.bin_name,
                                            decimal.Decimal,
                                            int,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        count: typing.Union[
                                            MetaOapg.properties.count,
                                            decimal.Decimal,
                                            int,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        cumulative_sum: typing.Union[
                                            MetaOapg.properties.cumulative_sum,
                                            decimal.Decimal,
                                            int,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        _configuration: typing.Optional[
                                            schemas.Configuration
                                        ] = None,
                                        **kwargs: typing.Union[
                                            schemas.AnyTypeSchema,
                                            dict,
                                            frozendict.frozendict,
                                            str,
                                            date,
                                            datetime,
                                            uuid.UUID,
                                            int,
                                            float,
                                            decimal.Decimal,
                                            None,
                                            list,
                                            tuple,
                                            bytes,
                                        ],
                                    ) -> "items":
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            bin=bin,
                                            bin_name=bin_name,
                                            count=count,
                                            cumulative_sum=cumulative_sum,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )

                            def __new__(
                                cls,
                                _arg: typing.Union[
                                    typing.Tuple[
                                        typing.Union[
                                            MetaOapg.items,
                                            dict,
                                            frozendict.frozendict,
                                        ]
                                    ],
                                    typing.List[
                                        typing.Union[
                                            MetaOapg.items,
                                            dict,
                                            frozendict.frozendict,
                                        ]
                                    ],
                                ],
                                _configuration: typing.Optional[
                                    schemas.Configuration
                                ] = None,
                            ) -> "rows":
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )

                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)

                        class fields(schemas.ListSchema):
                            class MetaOapg:
                                class items(schemas.DictSchema):
                                    class MetaOapg:
                                        class properties:
                                            name = schemas.StrSchema
                                            tableID = schemas.IntSchema
                                            columnID = schemas.IntSchema
                                            dataTypeID = schemas.IntSchema
                                            dataTypeSize = schemas.IntSchema
                                            dataTypeModifier = schemas.StrSchema
                                            format = schemas.StrSchema
                                            __annotations__ = {
                                                "name": name,
                                                "tableID": tableID,
                                                "columnID": columnID,
                                                "dataTypeID": dataTypeID,
                                                "dataTypeSize": dataTypeSize,
                                                "dataTypeModifier": dataTypeModifier,
                                                "format": format,
                                            }

                                    @typing.overload
                                    def __getitem__(
                                        self, name: typing_extensions.Literal["name"]
                                    ) -> MetaOapg.properties.name:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self, name: typing_extensions.Literal["tableID"]
                                    ) -> MetaOapg.properties.tableID:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self,
                                        name: typing_extensions.Literal["columnID"],
                                    ) -> MetaOapg.properties.columnID:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self,
                                        name: typing_extensions.Literal["dataTypeID"],
                                    ) -> MetaOapg.properties.dataTypeID:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self,
                                        name: typing_extensions.Literal["dataTypeSize"],
                                    ) -> MetaOapg.properties.dataTypeSize:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self,
                                        name: typing_extensions.Literal[
                                            "dataTypeModifier"
                                        ],
                                    ) -> MetaOapg.properties.dataTypeModifier:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self, name: typing_extensions.Literal["format"]
                                    ) -> MetaOapg.properties.format:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self, name: str
                                    ) -> schemas.UnsetAnyTypeSchema:
                                        ...

                                    def __getitem__(
                                        self,
                                        name: typing.Union[
                                            typing_extensions.Literal[
                                                "name",
                                                "tableID",
                                                "columnID",
                                                "dataTypeID",
                                                "dataTypeSize",
                                                "dataTypeModifier",
                                                "format",
                                            ],
                                            str,
                                        ],
                                    ):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: typing_extensions.Literal["name"]
                                    ) -> typing.Union[
                                        MetaOapg.properties.name, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: typing_extensions.Literal["tableID"]
                                    ) -> typing.Union[
                                        MetaOapg.properties.tableID, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self,
                                        name: typing_extensions.Literal["columnID"],
                                    ) -> typing.Union[
                                        MetaOapg.properties.columnID, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self,
                                        name: typing_extensions.Literal["dataTypeID"],
                                    ) -> typing.Union[
                                        MetaOapg.properties.dataTypeID, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self,
                                        name: typing_extensions.Literal["dataTypeSize"],
                                    ) -> typing.Union[
                                        MetaOapg.properties.dataTypeSize, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self,
                                        name: typing_extensions.Literal[
                                            "dataTypeModifier"
                                        ],
                                    ) -> typing.Union[
                                        MetaOapg.properties.dataTypeModifier,
                                        schemas.Unset,
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: typing_extensions.Literal["format"]
                                    ) -> typing.Union[
                                        MetaOapg.properties.format, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: str
                                    ) -> typing.Union[
                                        schemas.UnsetAnyTypeSchema, schemas.Unset
                                    ]:
                                        ...

                                    def get_item_oapg(
                                        self,
                                        name: typing.Union[
                                            typing_extensions.Literal[
                                                "name",
                                                "tableID",
                                                "columnID",
                                                "dataTypeID",
                                                "dataTypeSize",
                                                "dataTypeModifier",
                                                "format",
                                            ],
                                            str,
                                        ],
                                    ):
                                        return super().get_item_oapg(name)

                                    def __new__(
                                        cls,
                                        *_args: typing.Union[
                                            dict,
                                            frozendict.frozendict,
                                        ],
                                        name: typing.Union[
                                            MetaOapg.properties.name, str, schemas.Unset
                                        ] = schemas.unset,
                                        tableID: typing.Union[
                                            MetaOapg.properties.tableID,
                                            decimal.Decimal,
                                            int,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        columnID: typing.Union[
                                            MetaOapg.properties.columnID,
                                            decimal.Decimal,
                                            int,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        dataTypeID: typing.Union[
                                            MetaOapg.properties.dataTypeID,
                                            decimal.Decimal,
                                            int,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        dataTypeSize: typing.Union[
                                            MetaOapg.properties.dataTypeSize,
                                            decimal.Decimal,
                                            int,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        dataTypeModifier: typing.Union[
                                            MetaOapg.properties.dataTypeModifier,
                                            str,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        format: typing.Union[
                                            MetaOapg.properties.format,
                                            str,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        _configuration: typing.Optional[
                                            schemas.Configuration
                                        ] = None,
                                        **kwargs: typing.Union[
                                            schemas.AnyTypeSchema,
                                            dict,
                                            frozendict.frozendict,
                                            str,
                                            date,
                                            datetime,
                                            uuid.UUID,
                                            int,
                                            float,
                                            decimal.Decimal,
                                            None,
                                            list,
                                            tuple,
                                            bytes,
                                        ],
                                    ) -> "items":
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            name=name,
                                            tableID=tableID,
                                            columnID=columnID,
                                            dataTypeID=dataTypeID,
                                            dataTypeSize=dataTypeSize,
                                            dataTypeModifier=dataTypeModifier,
                                            format=format,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )

                            def __new__(
                                cls,
                                _arg: typing.Union[
                                    typing.Tuple[
                                        typing.Union[
                                            MetaOapg.items,
                                            dict,
                                            frozendict.frozendict,
                                        ]
                                    ],
                                    typing.List[
                                        typing.Union[
                                            MetaOapg.items,
                                            dict,
                                            frozendict.frozendict,
                                        ]
                                    ],
                                ],
                                _configuration: typing.Optional[
                                    schemas.Configuration
                                ] = None,
                            ) -> "fields":
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )

                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)

                        rowAsArray = schemas.BoolSchema

                        class sum(schemas.DictSchema):
                            class MetaOapg:
                                class properties:
                                    count = schemas.IntSchema
                                    __annotations__ = {
                                        "count": count,
                                    }

                            @typing.overload
                            def __getitem__(
                                self, name: typing_extensions.Literal["count"]
                            ) -> MetaOapg.properties.count:
                                ...

                            @typing.overload
                            def __getitem__(
                                self, name: str
                            ) -> schemas.UnsetAnyTypeSchema:
                                ...

                            def __getitem__(
                                self,
                                name: typing.Union[
                                    typing_extensions.Literal[
                                        "count",
                                    ],
                                    str,
                                ],
                            ):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)

                            @typing.overload
                            def get_item_oapg(
                                self, name: typing_extensions.Literal["count"]
                            ) -> typing.Union[MetaOapg.properties.count, schemas.Unset]:
                                ...

                            @typing.overload
                            def get_item_oapg(
                                self, name: str
                            ) -> typing.Union[
                                schemas.UnsetAnyTypeSchema, schemas.Unset
                            ]:
                                ...

                            def get_item_oapg(
                                self,
                                name: typing.Union[
                                    typing_extensions.Literal[
                                        "count",
                                    ],
                                    str,
                                ],
                            ):
                                return super().get_item_oapg(name)

                            def __new__(
                                cls,
                                *_args: typing.Union[
                                    dict,
                                    frozendict.frozendict,
                                ],
                                count: typing.Union[
                                    MetaOapg.properties.count,
                                    decimal.Decimal,
                                    int,
                                    schemas.Unset,
                                ] = schemas.unset,
                                _configuration: typing.Optional[
                                    schemas.Configuration
                                ] = None,
                                **kwargs: typing.Union[
                                    schemas.AnyTypeSchema,
                                    dict,
                                    frozendict.frozendict,
                                    str,
                                    date,
                                    datetime,
                                    uuid.UUID,
                                    int,
                                    float,
                                    decimal.Decimal,
                                    None,
                                    list,
                                    tuple,
                                    bytes,
                                ],
                            ) -> "sum":
                                return super().__new__(
                                    cls,
                                    *_args,
                                    count=count,
                                    _configuration=_configuration,
                                    **kwargs,
                                )

                        __annotations__ = {
                            "commmand": commmand,
                            "rowCount": rowCount,
                            "rows": rows,
                            "fields": fields,
                            "rowAsArray": rowAsArray,
                            "sum": sum,
                        }

                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["commmand"]
                ) -> MetaOapg.properties.commmand:
                    ...

                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["rowCount"]
                ) -> MetaOapg.properties.rowCount:
                    ...

                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["rows"]
                ) -> MetaOapg.properties.rows:
                    ...

                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["fields"]
                ) -> MetaOapg.properties.fields:
                    ...

                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["rowAsArray"]
                ) -> MetaOapg.properties.rowAsArray:
                    ...

                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["sum"]
                ) -> MetaOapg.properties.sum:
                    ...

                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
                    ...

                def __getitem__(
                    self,
                    name: typing.Union[
                        typing_extensions.Literal[
                            "commmand",
                            "rowCount",
                            "rows",
                            "fields",
                            "rowAsArray",
                            "sum",
                        ],
                        str,
                    ],
                ):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)

                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["commmand"]
                ) -> typing.Union[MetaOapg.properties.commmand, schemas.Unset]:
                    ...

                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["rowCount"]
                ) -> typing.Union[MetaOapg.properties.rowCount, schemas.Unset]:
                    ...

                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["rows"]
                ) -> typing.Union[MetaOapg.properties.rows, schemas.Unset]:
                    ...

                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["fields"]
                ) -> typing.Union[MetaOapg.properties.fields, schemas.Unset]:
                    ...

                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["rowAsArray"]
                ) -> typing.Union[MetaOapg.properties.rowAsArray, schemas.Unset]:
                    ...

                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["sum"]
                ) -> typing.Union[MetaOapg.properties.sum, schemas.Unset]:
                    ...

                @typing.overload
                def get_item_oapg(
                    self, name: str
                ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
                    ...

                def get_item_oapg(
                    self,
                    name: typing.Union[
                        typing_extensions.Literal[
                            "commmand",
                            "rowCount",
                            "rows",
                            "fields",
                            "rowAsArray",
                            "sum",
                        ],
                        str,
                    ],
                ):
                    return super().get_item_oapg(name)

                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                    ],
                    commmand: typing.Union[
                        MetaOapg.properties.commmand, str, schemas.Unset
                    ] = schemas.unset,
                    rowCount: typing.Union[
                        MetaOapg.properties.rowCount,
                        decimal.Decimal,
                        int,
                        schemas.Unset,
                    ] = schemas.unset,
                    rows: typing.Union[
                        MetaOapg.properties.rows, list, tuple, schemas.Unset
                    ] = schemas.unset,
                    fields: typing.Union[
                        MetaOapg.properties.fields, list, tuple, schemas.Unset
                    ] = schemas.unset,
                    rowAsArray: typing.Union[
                        MetaOapg.properties.rowAsArray, bool, schemas.Unset
                    ] = schemas.unset,
                    sum: typing.Union[
                        MetaOapg.properties.sum,
                        dict,
                        frozendict.frozendict,
                        schemas.Unset,
                    ] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[
                        schemas.AnyTypeSchema,
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        None,
                        list,
                        tuple,
                        bytes,
                    ],
                ) -> "ranks":
                    return super().__new__(
                        cls,
                        *_args,
                        commmand=commmand,
                        rowCount=rowCount,
                        rows=rows,
                        fields=fields,
                        rowAsArray=rowAsArray,
                        sum=sum,
                        _configuration=_configuration,
                        **kwargs,
                    )

            class mmr(schemas.DictSchema):
                class MetaOapg:
                    class properties:
                        commmand = schemas.StrSchema
                        rowCount = schemas.IntSchema

                        class rows(schemas.ListSchema):
                            class MetaOapg:
                                class items(schemas.DictSchema):
                                    class MetaOapg:
                                        class properties:
                                            bin = schemas.IntSchema
                                            bin_name = schemas.IntSchema
                                            count = schemas.IntSchema
                                            cumulative_sum = schemas.IntSchema
                                            __annotations__ = {
                                                "bin": bin,
                                                "bin_name": bin_name,
                                                "count": count,
                                                "cumulative_sum": cumulative_sum,
                                            }

                                    @typing.overload
                                    def __getitem__(
                                        self, name: typing_extensions.Literal["bin"]
                                    ) -> MetaOapg.properties.bin:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self,
                                        name: typing_extensions.Literal["bin_name"],
                                    ) -> MetaOapg.properties.bin_name:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self, name: typing_extensions.Literal["count"]
                                    ) -> MetaOapg.properties.count:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self,
                                        name: typing_extensions.Literal[
                                            "cumulative_sum"
                                        ],
                                    ) -> MetaOapg.properties.cumulative_sum:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self, name: str
                                    ) -> schemas.UnsetAnyTypeSchema:
                                        ...

                                    def __getitem__(
                                        self,
                                        name: typing.Union[
                                            typing_extensions.Literal[
                                                "bin",
                                                "bin_name",
                                                "count",
                                                "cumulative_sum",
                                            ],
                                            str,
                                        ],
                                    ):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: typing_extensions.Literal["bin"]
                                    ) -> typing.Union[
                                        MetaOapg.properties.bin, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self,
                                        name: typing_extensions.Literal["bin_name"],
                                    ) -> typing.Union[
                                        MetaOapg.properties.bin_name, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: typing_extensions.Literal["count"]
                                    ) -> typing.Union[
                                        MetaOapg.properties.count, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self,
                                        name: typing_extensions.Literal[
                                            "cumulative_sum"
                                        ],
                                    ) -> typing.Union[
                                        MetaOapg.properties.cumulative_sum,
                                        schemas.Unset,
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: str
                                    ) -> typing.Union[
                                        schemas.UnsetAnyTypeSchema, schemas.Unset
                                    ]:
                                        ...

                                    def get_item_oapg(
                                        self,
                                        name: typing.Union[
                                            typing_extensions.Literal[
                                                "bin",
                                                "bin_name",
                                                "count",
                                                "cumulative_sum",
                                            ],
                                            str,
                                        ],
                                    ):
                                        return super().get_item_oapg(name)

                                    def __new__(
                                        cls,
                                        *_args: typing.Union[
                                            dict,
                                            frozendict.frozendict,
                                        ],
                                        bin: typing.Union[
                                            MetaOapg.properties.bin,
                                            decimal.Decimal,
                                            int,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        bin_name: typing.Union[
                                            MetaOapg.properties.bin_name,
                                            decimal.Decimal,
                                            int,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        count: typing.Union[
                                            MetaOapg.properties.count,
                                            decimal.Decimal,
                                            int,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        cumulative_sum: typing.Union[
                                            MetaOapg.properties.cumulative_sum,
                                            decimal.Decimal,
                                            int,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        _configuration: typing.Optional[
                                            schemas.Configuration
                                        ] = None,
                                        **kwargs: typing.Union[
                                            schemas.AnyTypeSchema,
                                            dict,
                                            frozendict.frozendict,
                                            str,
                                            date,
                                            datetime,
                                            uuid.UUID,
                                            int,
                                            float,
                                            decimal.Decimal,
                                            None,
                                            list,
                                            tuple,
                                            bytes,
                                        ],
                                    ) -> "items":
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            bin=bin,
                                            bin_name=bin_name,
                                            count=count,
                                            cumulative_sum=cumulative_sum,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )

                            def __new__(
                                cls,
                                _arg: typing.Union[
                                    typing.Tuple[
                                        typing.Union[
                                            MetaOapg.items,
                                            dict,
                                            frozendict.frozendict,
                                        ]
                                    ],
                                    typing.List[
                                        typing.Union[
                                            MetaOapg.items,
                                            dict,
                                            frozendict.frozendict,
                                        ]
                                    ],
                                ],
                                _configuration: typing.Optional[
                                    schemas.Configuration
                                ] = None,
                            ) -> "rows":
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )

                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)

                        class fields(schemas.ListSchema):
                            class MetaOapg:
                                class items(schemas.DictSchema):
                                    class MetaOapg:
                                        class properties:
                                            name = schemas.StrSchema
                                            tableID = schemas.IntSchema
                                            columnID = schemas.IntSchema
                                            dataTypeID = schemas.IntSchema
                                            dataTypeSize = schemas.IntSchema
                                            dataTypeModifier = schemas.StrSchema
                                            format = schemas.StrSchema
                                            __annotations__ = {
                                                "name": name,
                                                "tableID": tableID,
                                                "columnID": columnID,
                                                "dataTypeID": dataTypeID,
                                                "dataTypeSize": dataTypeSize,
                                                "dataTypeModifier": dataTypeModifier,
                                                "format": format,
                                            }

                                    @typing.overload
                                    def __getitem__(
                                        self, name: typing_extensions.Literal["name"]
                                    ) -> MetaOapg.properties.name:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self, name: typing_extensions.Literal["tableID"]
                                    ) -> MetaOapg.properties.tableID:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self,
                                        name: typing_extensions.Literal["columnID"],
                                    ) -> MetaOapg.properties.columnID:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self,
                                        name: typing_extensions.Literal["dataTypeID"],
                                    ) -> MetaOapg.properties.dataTypeID:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self,
                                        name: typing_extensions.Literal["dataTypeSize"],
                                    ) -> MetaOapg.properties.dataTypeSize:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self,
                                        name: typing_extensions.Literal[
                                            "dataTypeModifier"
                                        ],
                                    ) -> MetaOapg.properties.dataTypeModifier:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self, name: typing_extensions.Literal["format"]
                                    ) -> MetaOapg.properties.format:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self, name: str
                                    ) -> schemas.UnsetAnyTypeSchema:
                                        ...

                                    def __getitem__(
                                        self,
                                        name: typing.Union[
                                            typing_extensions.Literal[
                                                "name",
                                                "tableID",
                                                "columnID",
                                                "dataTypeID",
                                                "dataTypeSize",
                                                "dataTypeModifier",
                                                "format",
                                            ],
                                            str,
                                        ],
                                    ):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: typing_extensions.Literal["name"]
                                    ) -> typing.Union[
                                        MetaOapg.properties.name, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: typing_extensions.Literal["tableID"]
                                    ) -> typing.Union[
                                        MetaOapg.properties.tableID, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self,
                                        name: typing_extensions.Literal["columnID"],
                                    ) -> typing.Union[
                                        MetaOapg.properties.columnID, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self,
                                        name: typing_extensions.Literal["dataTypeID"],
                                    ) -> typing.Union[
                                        MetaOapg.properties.dataTypeID, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self,
                                        name: typing_extensions.Literal["dataTypeSize"],
                                    ) -> typing.Union[
                                        MetaOapg.properties.dataTypeSize, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self,
                                        name: typing_extensions.Literal[
                                            "dataTypeModifier"
                                        ],
                                    ) -> typing.Union[
                                        MetaOapg.properties.dataTypeModifier,
                                        schemas.Unset,
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: typing_extensions.Literal["format"]
                                    ) -> typing.Union[
                                        MetaOapg.properties.format, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: str
                                    ) -> typing.Union[
                                        schemas.UnsetAnyTypeSchema, schemas.Unset
                                    ]:
                                        ...

                                    def get_item_oapg(
                                        self,
                                        name: typing.Union[
                                            typing_extensions.Literal[
                                                "name",
                                                "tableID",
                                                "columnID",
                                                "dataTypeID",
                                                "dataTypeSize",
                                                "dataTypeModifier",
                                                "format",
                                            ],
                                            str,
                                        ],
                                    ):
                                        return super().get_item_oapg(name)

                                    def __new__(
                                        cls,
                                        *_args: typing.Union[
                                            dict,
                                            frozendict.frozendict,
                                        ],
                                        name: typing.Union[
                                            MetaOapg.properties.name, str, schemas.Unset
                                        ] = schemas.unset,
                                        tableID: typing.Union[
                                            MetaOapg.properties.tableID,
                                            decimal.Decimal,
                                            int,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        columnID: typing.Union[
                                            MetaOapg.properties.columnID,
                                            decimal.Decimal,
                                            int,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        dataTypeID: typing.Union[
                                            MetaOapg.properties.dataTypeID,
                                            decimal.Decimal,
                                            int,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        dataTypeSize: typing.Union[
                                            MetaOapg.properties.dataTypeSize,
                                            decimal.Decimal,
                                            int,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        dataTypeModifier: typing.Union[
                                            MetaOapg.properties.dataTypeModifier,
                                            str,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        format: typing.Union[
                                            MetaOapg.properties.format,
                                            str,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        _configuration: typing.Optional[
                                            schemas.Configuration
                                        ] = None,
                                        **kwargs: typing.Union[
                                            schemas.AnyTypeSchema,
                                            dict,
                                            frozendict.frozendict,
                                            str,
                                            date,
                                            datetime,
                                            uuid.UUID,
                                            int,
                                            float,
                                            decimal.Decimal,
                                            None,
                                            list,
                                            tuple,
                                            bytes,
                                        ],
                                    ) -> "items":
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            name=name,
                                            tableID=tableID,
                                            columnID=columnID,
                                            dataTypeID=dataTypeID,
                                            dataTypeSize=dataTypeSize,
                                            dataTypeModifier=dataTypeModifier,
                                            format=format,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )

                            def __new__(
                                cls,
                                _arg: typing.Union[
                                    typing.Tuple[
                                        typing.Union[
                                            MetaOapg.items,
                                            dict,
                                            frozendict.frozendict,
                                        ]
                                    ],
                                    typing.List[
                                        typing.Union[
                                            MetaOapg.items,
                                            dict,
                                            frozendict.frozendict,
                                        ]
                                    ],
                                ],
                                _configuration: typing.Optional[
                                    schemas.Configuration
                                ] = None,
                            ) -> "fields":
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )

                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)

                        rowAsArray = schemas.BoolSchema

                        class sum(schemas.DictSchema):
                            class MetaOapg:
                                class properties:
                                    count = schemas.IntSchema
                                    __annotations__ = {
                                        "count": count,
                                    }

                            @typing.overload
                            def __getitem__(
                                self, name: typing_extensions.Literal["count"]
                            ) -> MetaOapg.properties.count:
                                ...

                            @typing.overload
                            def __getitem__(
                                self, name: str
                            ) -> schemas.UnsetAnyTypeSchema:
                                ...

                            def __getitem__(
                                self,
                                name: typing.Union[
                                    typing_extensions.Literal[
                                        "count",
                                    ],
                                    str,
                                ],
                            ):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)

                            @typing.overload
                            def get_item_oapg(
                                self, name: typing_extensions.Literal["count"]
                            ) -> typing.Union[MetaOapg.properties.count, schemas.Unset]:
                                ...

                            @typing.overload
                            def get_item_oapg(
                                self, name: str
                            ) -> typing.Union[
                                schemas.UnsetAnyTypeSchema, schemas.Unset
                            ]:
                                ...

                            def get_item_oapg(
                                self,
                                name: typing.Union[
                                    typing_extensions.Literal[
                                        "count",
                                    ],
                                    str,
                                ],
                            ):
                                return super().get_item_oapg(name)

                            def __new__(
                                cls,
                                *_args: typing.Union[
                                    dict,
                                    frozendict.frozendict,
                                ],
                                count: typing.Union[
                                    MetaOapg.properties.count,
                                    decimal.Decimal,
                                    int,
                                    schemas.Unset,
                                ] = schemas.unset,
                                _configuration: typing.Optional[
                                    schemas.Configuration
                                ] = None,
                                **kwargs: typing.Union[
                                    schemas.AnyTypeSchema,
                                    dict,
                                    frozendict.frozendict,
                                    str,
                                    date,
                                    datetime,
                                    uuid.UUID,
                                    int,
                                    float,
                                    decimal.Decimal,
                                    None,
                                    list,
                                    tuple,
                                    bytes,
                                ],
                            ) -> "sum":
                                return super().__new__(
                                    cls,
                                    *_args,
                                    count=count,
                                    _configuration=_configuration,
                                    **kwargs,
                                )

                        __annotations__ = {
                            "commmand": commmand,
                            "rowCount": rowCount,
                            "rows": rows,
                            "fields": fields,
                            "rowAsArray": rowAsArray,
                            "sum": sum,
                        }

                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["commmand"]
                ) -> MetaOapg.properties.commmand:
                    ...

                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["rowCount"]
                ) -> MetaOapg.properties.rowCount:
                    ...

                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["rows"]
                ) -> MetaOapg.properties.rows:
                    ...

                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["fields"]
                ) -> MetaOapg.properties.fields:
                    ...

                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["rowAsArray"]
                ) -> MetaOapg.properties.rowAsArray:
                    ...

                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["sum"]
                ) -> MetaOapg.properties.sum:
                    ...

                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
                    ...

                def __getitem__(
                    self,
                    name: typing.Union[
                        typing_extensions.Literal[
                            "commmand",
                            "rowCount",
                            "rows",
                            "fields",
                            "rowAsArray",
                            "sum",
                        ],
                        str,
                    ],
                ):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)

                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["commmand"]
                ) -> typing.Union[MetaOapg.properties.commmand, schemas.Unset]:
                    ...

                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["rowCount"]
                ) -> typing.Union[MetaOapg.properties.rowCount, schemas.Unset]:
                    ...

                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["rows"]
                ) -> typing.Union[MetaOapg.properties.rows, schemas.Unset]:
                    ...

                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["fields"]
                ) -> typing.Union[MetaOapg.properties.fields, schemas.Unset]:
                    ...

                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["rowAsArray"]
                ) -> typing.Union[MetaOapg.properties.rowAsArray, schemas.Unset]:
                    ...

                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["sum"]
                ) -> typing.Union[MetaOapg.properties.sum, schemas.Unset]:
                    ...

                @typing.overload
                def get_item_oapg(
                    self, name: str
                ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
                    ...

                def get_item_oapg(
                    self,
                    name: typing.Union[
                        typing_extensions.Literal[
                            "commmand",
                            "rowCount",
                            "rows",
                            "fields",
                            "rowAsArray",
                            "sum",
                        ],
                        str,
                    ],
                ):
                    return super().get_item_oapg(name)

                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                    ],
                    commmand: typing.Union[
                        MetaOapg.properties.commmand, str, schemas.Unset
                    ] = schemas.unset,
                    rowCount: typing.Union[
                        MetaOapg.properties.rowCount,
                        decimal.Decimal,
                        int,
                        schemas.Unset,
                    ] = schemas.unset,
                    rows: typing.Union[
                        MetaOapg.properties.rows, list, tuple, schemas.Unset
                    ] = schemas.unset,
                    fields: typing.Union[
                        MetaOapg.properties.fields, list, tuple, schemas.Unset
                    ] = schemas.unset,
                    rowAsArray: typing.Union[
                        MetaOapg.properties.rowAsArray, bool, schemas.Unset
                    ] = schemas.unset,
                    sum: typing.Union[
                        MetaOapg.properties.sum,
                        dict,
                        frozendict.frozendict,
                        schemas.Unset,
                    ] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[
                        schemas.AnyTypeSchema,
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        None,
                        list,
                        tuple,
                        bytes,
                    ],
                ) -> "mmr":
                    return super().__new__(
                        cls,
                        *_args,
                        commmand=commmand,
                        rowCount=rowCount,
                        rows=rows,
                        fields=fields,
                        rowAsArray=rowAsArray,
                        sum=sum,
                        _configuration=_configuration,
                        **kwargs,
                    )

            class country_mmr(schemas.DictSchema):
                class MetaOapg:
                    class properties:
                        commmand = schemas.StrSchema
                        rowCount = schemas.IntSchema

                        class rows(schemas.ListSchema):
                            class MetaOapg:
                                class items(schemas.DictSchema):
                                    class MetaOapg:
                                        class properties:
                                            loccountrycode = schemas.StrSchema
                                            count = schemas.IntSchema
                                            avg = schemas.StrSchema
                                            common = schemas.StrSchema
                                            __annotations__ = {
                                                "loccountrycode": loccountrycode,
                                                "count": count,
                                                "avg": avg,
                                                "common": common,
                                            }

                                    @typing.overload
                                    def __getitem__(
                                        self,
                                        name: typing_extensions.Literal[
                                            "loccountrycode"
                                        ],
                                    ) -> MetaOapg.properties.loccountrycode:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self, name: typing_extensions.Literal["count"]
                                    ) -> MetaOapg.properties.count:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self, name: typing_extensions.Literal["avg"]
                                    ) -> MetaOapg.properties.avg:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self, name: typing_extensions.Literal["common"]
                                    ) -> MetaOapg.properties.common:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self, name: str
                                    ) -> schemas.UnsetAnyTypeSchema:
                                        ...

                                    def __getitem__(
                                        self,
                                        name: typing.Union[
                                            typing_extensions.Literal[
                                                "loccountrycode",
                                                "count",
                                                "avg",
                                                "common",
                                            ],
                                            str,
                                        ],
                                    ):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)

                                    @typing.overload
                                    def get_item_oapg(
                                        self,
                                        name: typing_extensions.Literal[
                                            "loccountrycode"
                                        ],
                                    ) -> typing.Union[
                                        MetaOapg.properties.loccountrycode,
                                        schemas.Unset,
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: typing_extensions.Literal["count"]
                                    ) -> typing.Union[
                                        MetaOapg.properties.count, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: typing_extensions.Literal["avg"]
                                    ) -> typing.Union[
                                        MetaOapg.properties.avg, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: typing_extensions.Literal["common"]
                                    ) -> typing.Union[
                                        MetaOapg.properties.common, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: str
                                    ) -> typing.Union[
                                        schemas.UnsetAnyTypeSchema, schemas.Unset
                                    ]:
                                        ...

                                    def get_item_oapg(
                                        self,
                                        name: typing.Union[
                                            typing_extensions.Literal[
                                                "loccountrycode",
                                                "count",
                                                "avg",
                                                "common",
                                            ],
                                            str,
                                        ],
                                    ):
                                        return super().get_item_oapg(name)

                                    def __new__(
                                        cls,
                                        *_args: typing.Union[
                                            dict,
                                            frozendict.frozendict,
                                        ],
                                        loccountrycode: typing.Union[
                                            MetaOapg.properties.loccountrycode,
                                            str,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        count: typing.Union[
                                            MetaOapg.properties.count,
                                            decimal.Decimal,
                                            int,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        avg: typing.Union[
                                            MetaOapg.properties.avg, str, schemas.Unset
                                        ] = schemas.unset,
                                        common: typing.Union[
                                            MetaOapg.properties.common,
                                            str,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        _configuration: typing.Optional[
                                            schemas.Configuration
                                        ] = None,
                                        **kwargs: typing.Union[
                                            schemas.AnyTypeSchema,
                                            dict,
                                            frozendict.frozendict,
                                            str,
                                            date,
                                            datetime,
                                            uuid.UUID,
                                            int,
                                            float,
                                            decimal.Decimal,
                                            None,
                                            list,
                                            tuple,
                                            bytes,
                                        ],
                                    ) -> "items":
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            loccountrycode=loccountrycode,
                                            count=count,
                                            avg=avg,
                                            common=common,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )

                            def __new__(
                                cls,
                                _arg: typing.Union[
                                    typing.Tuple[
                                        typing.Union[
                                            MetaOapg.items,
                                            dict,
                                            frozendict.frozendict,
                                        ]
                                    ],
                                    typing.List[
                                        typing.Union[
                                            MetaOapg.items,
                                            dict,
                                            frozendict.frozendict,
                                        ]
                                    ],
                                ],
                                _configuration: typing.Optional[
                                    schemas.Configuration
                                ] = None,
                            ) -> "rows":
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )

                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)

                        class fields(schemas.ListSchema):
                            class MetaOapg:
                                class items(schemas.DictSchema):
                                    class MetaOapg:
                                        class properties:
                                            name = schemas.StrSchema
                                            tableID = schemas.IntSchema
                                            columnID = schemas.IntSchema
                                            dataTypeID = schemas.IntSchema
                                            dataTypeSize = schemas.IntSchema
                                            dataTypeModifier = schemas.IntSchema
                                            format = schemas.StrSchema
                                            __annotations__ = {
                                                "name": name,
                                                "tableID": tableID,
                                                "columnID": columnID,
                                                "dataTypeID": dataTypeID,
                                                "dataTypeSize": dataTypeSize,
                                                "dataTypeModifier": dataTypeModifier,
                                                "format": format,
                                            }

                                    @typing.overload
                                    def __getitem__(
                                        self, name: typing_extensions.Literal["name"]
                                    ) -> MetaOapg.properties.name:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self, name: typing_extensions.Literal["tableID"]
                                    ) -> MetaOapg.properties.tableID:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self,
                                        name: typing_extensions.Literal["columnID"],
                                    ) -> MetaOapg.properties.columnID:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self,
                                        name: typing_extensions.Literal["dataTypeID"],
                                    ) -> MetaOapg.properties.dataTypeID:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self,
                                        name: typing_extensions.Literal["dataTypeSize"],
                                    ) -> MetaOapg.properties.dataTypeSize:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self,
                                        name: typing_extensions.Literal[
                                            "dataTypeModifier"
                                        ],
                                    ) -> MetaOapg.properties.dataTypeModifier:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self, name: typing_extensions.Literal["format"]
                                    ) -> MetaOapg.properties.format:
                                        ...

                                    @typing.overload
                                    def __getitem__(
                                        self, name: str
                                    ) -> schemas.UnsetAnyTypeSchema:
                                        ...

                                    def __getitem__(
                                        self,
                                        name: typing.Union[
                                            typing_extensions.Literal[
                                                "name",
                                                "tableID",
                                                "columnID",
                                                "dataTypeID",
                                                "dataTypeSize",
                                                "dataTypeModifier",
                                                "format",
                                            ],
                                            str,
                                        ],
                                    ):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: typing_extensions.Literal["name"]
                                    ) -> typing.Union[
                                        MetaOapg.properties.name, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: typing_extensions.Literal["tableID"]
                                    ) -> typing.Union[
                                        MetaOapg.properties.tableID, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self,
                                        name: typing_extensions.Literal["columnID"],
                                    ) -> typing.Union[
                                        MetaOapg.properties.columnID, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self,
                                        name: typing_extensions.Literal["dataTypeID"],
                                    ) -> typing.Union[
                                        MetaOapg.properties.dataTypeID, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self,
                                        name: typing_extensions.Literal["dataTypeSize"],
                                    ) -> typing.Union[
                                        MetaOapg.properties.dataTypeSize, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self,
                                        name: typing_extensions.Literal[
                                            "dataTypeModifier"
                                        ],
                                    ) -> typing.Union[
                                        MetaOapg.properties.dataTypeModifier,
                                        schemas.Unset,
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: typing_extensions.Literal["format"]
                                    ) -> typing.Union[
                                        MetaOapg.properties.format, schemas.Unset
                                    ]:
                                        ...

                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: str
                                    ) -> typing.Union[
                                        schemas.UnsetAnyTypeSchema, schemas.Unset
                                    ]:
                                        ...

                                    def get_item_oapg(
                                        self,
                                        name: typing.Union[
                                            typing_extensions.Literal[
                                                "name",
                                                "tableID",
                                                "columnID",
                                                "dataTypeID",
                                                "dataTypeSize",
                                                "dataTypeModifier",
                                                "format",
                                            ],
                                            str,
                                        ],
                                    ):
                                        return super().get_item_oapg(name)

                                    def __new__(
                                        cls,
                                        *_args: typing.Union[
                                            dict,
                                            frozendict.frozendict,
                                        ],
                                        name: typing.Union[
                                            MetaOapg.properties.name, str, schemas.Unset
                                        ] = schemas.unset,
                                        tableID: typing.Union[
                                            MetaOapg.properties.tableID,
                                            decimal.Decimal,
                                            int,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        columnID: typing.Union[
                                            MetaOapg.properties.columnID,
                                            decimal.Decimal,
                                            int,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        dataTypeID: typing.Union[
                                            MetaOapg.properties.dataTypeID,
                                            decimal.Decimal,
                                            int,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        dataTypeSize: typing.Union[
                                            MetaOapg.properties.dataTypeSize,
                                            decimal.Decimal,
                                            int,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        dataTypeModifier: typing.Union[
                                            MetaOapg.properties.dataTypeModifier,
                                            decimal.Decimal,
                                            int,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        format: typing.Union[
                                            MetaOapg.properties.format,
                                            str,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        _configuration: typing.Optional[
                                            schemas.Configuration
                                        ] = None,
                                        **kwargs: typing.Union[
                                            schemas.AnyTypeSchema,
                                            dict,
                                            frozendict.frozendict,
                                            str,
                                            date,
                                            datetime,
                                            uuid.UUID,
                                            int,
                                            float,
                                            decimal.Decimal,
                                            None,
                                            list,
                                            tuple,
                                            bytes,
                                        ],
                                    ) -> "items":
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            name=name,
                                            tableID=tableID,
                                            columnID=columnID,
                                            dataTypeID=dataTypeID,
                                            dataTypeSize=dataTypeSize,
                                            dataTypeModifier=dataTypeModifier,
                                            format=format,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )

                            def __new__(
                                cls,
                                _arg: typing.Union[
                                    typing.Tuple[
                                        typing.Union[
                                            MetaOapg.items,
                                            dict,
                                            frozendict.frozendict,
                                        ]
                                    ],
                                    typing.List[
                                        typing.Union[
                                            MetaOapg.items,
                                            dict,
                                            frozendict.frozendict,
                                        ]
                                    ],
                                ],
                                _configuration: typing.Optional[
                                    schemas.Configuration
                                ] = None,
                            ) -> "fields":
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )

                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)

                        rowAsArray = schemas.BoolSchema
                        __annotations__ = {
                            "commmand": commmand,
                            "rowCount": rowCount,
                            "rows": rows,
                            "fields": fields,
                            "rowAsArray": rowAsArray,
                        }

                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["commmand"]
                ) -> MetaOapg.properties.commmand:
                    ...

                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["rowCount"]
                ) -> MetaOapg.properties.rowCount:
                    ...

                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["rows"]
                ) -> MetaOapg.properties.rows:
                    ...

                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["fields"]
                ) -> MetaOapg.properties.fields:
                    ...

                @typing.overload
                def __getitem__(
                    self, name: typing_extensions.Literal["rowAsArray"]
                ) -> MetaOapg.properties.rowAsArray:
                    ...

                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
                    ...

                def __getitem__(
                    self,
                    name: typing.Union[
                        typing_extensions.Literal[
                            "commmand",
                            "rowCount",
                            "rows",
                            "fields",
                            "rowAsArray",
                        ],
                        str,
                    ],
                ):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)

                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["commmand"]
                ) -> typing.Union[MetaOapg.properties.commmand, schemas.Unset]:
                    ...

                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["rowCount"]
                ) -> typing.Union[MetaOapg.properties.rowCount, schemas.Unset]:
                    ...

                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["rows"]
                ) -> typing.Union[MetaOapg.properties.rows, schemas.Unset]:
                    ...

                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["fields"]
                ) -> typing.Union[MetaOapg.properties.fields, schemas.Unset]:
                    ...

                @typing.overload
                def get_item_oapg(
                    self, name: typing_extensions.Literal["rowAsArray"]
                ) -> typing.Union[MetaOapg.properties.rowAsArray, schemas.Unset]:
                    ...

                @typing.overload
                def get_item_oapg(
                    self, name: str
                ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
                    ...

                def get_item_oapg(
                    self,
                    name: typing.Union[
                        typing_extensions.Literal[
                            "commmand",
                            "rowCount",
                            "rows",
                            "fields",
                            "rowAsArray",
                        ],
                        str,
                    ],
                ):
                    return super().get_item_oapg(name)

                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                    ],
                    commmand: typing.Union[
                        MetaOapg.properties.commmand, str, schemas.Unset
                    ] = schemas.unset,
                    rowCount: typing.Union[
                        MetaOapg.properties.rowCount,
                        decimal.Decimal,
                        int,
                        schemas.Unset,
                    ] = schemas.unset,
                    rows: typing.Union[
                        MetaOapg.properties.rows, list, tuple, schemas.Unset
                    ] = schemas.unset,
                    fields: typing.Union[
                        MetaOapg.properties.fields, list, tuple, schemas.Unset
                    ] = schemas.unset,
                    rowAsArray: typing.Union[
                        MetaOapg.properties.rowAsArray, bool, schemas.Unset
                    ] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[
                        schemas.AnyTypeSchema,
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        None,
                        list,
                        tuple,
                        bytes,
                    ],
                ) -> "country_mmr":
                    return super().__new__(
                        cls,
                        *_args,
                        commmand=commmand,
                        rowCount=rowCount,
                        rows=rows,
                        fields=fields,
                        rowAsArray=rowAsArray,
                        _configuration=_configuration,
                        **kwargs,
                    )

            __annotations__ = {
                "ranks": ranks,
                "mmr": mmr,
                "country_mmr": country_mmr,
            }

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["ranks"]
    ) -> MetaOapg.properties.ranks:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["mmr"]
    ) -> MetaOapg.properties.mmr:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["country_mmr"]
    ) -> MetaOapg.properties.country_mmr:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "ranks",
                "mmr",
                "country_mmr",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["ranks"]
    ) -> typing.Union[MetaOapg.properties.ranks, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["mmr"]
    ) -> typing.Union[MetaOapg.properties.mmr, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["country_mmr"]
    ) -> typing.Union[MetaOapg.properties.country_mmr, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "ranks",
                "mmr",
                "country_mmr",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        ranks: typing.Union[
            MetaOapg.properties.ranks, dict, frozendict.frozendict, schemas.Unset
        ] = schemas.unset,
        mmr: typing.Union[
            MetaOapg.properties.mmr, dict, frozendict.frozendict, schemas.Unset
        ] = schemas.unset,
        country_mmr: typing.Union[
            MetaOapg.properties.country_mmr, dict, frozendict.frozendict, schemas.Unset
        ] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "SchemaFor200ResponseBodyApplicationJson":
        return super().__new__(
            cls,
            *_args,
            ranks=ranks,
            mmr=mmr,
            country_mmr=country_mmr,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        "application/json": api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson
        ),
    },
)
_status_code_to_response = {
    "200": _response_for_200,
}
_all_accept_content_types = ("application/json",)


class BaseApi(api_client.Api):
    @typing.overload
    def _distributions_get_oapg(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[ApiResponseFor200,]:
        ...

    @typing.overload
    def _distributions_get_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization:
        ...

    @typing.overload
    def _distributions_get_oapg(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[ApiResponseFor200, api_client.ApiResponseWithoutDeserialization,]:
        ...

    def _distributions_get_oapg(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        GET /distributions
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add("Accept", accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method="get".upper(),
            headers=_headers,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(
                response=response
            )
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(
                    response, self.api_client.configuration
                )
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(
                    response=response
                )

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response,
            )

        return api_response


class DistributionsGet(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def distributions_get(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[ApiResponseFor200,]:
        ...

    @typing.overload
    def distributions_get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization:
        ...

    @typing.overload
    def distributions_get(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[ApiResponseFor200, api_client.ApiResponseWithoutDeserialization,]:
        ...

    def distributions_get(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._distributions_get_oapg(
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization,
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[ApiResponseFor200,]:
        ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization:
        ...

    @typing.overload
    def get(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[ApiResponseFor200, api_client.ApiResponseWithoutDeserialization,]:
        ...

    def get(
        self,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._distributions_get_oapg(
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization,
        )
