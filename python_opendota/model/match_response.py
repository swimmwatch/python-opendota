"""
    OpenDota API

    # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.   # noqa: E501

    The version of the OpenAPI document: 18.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from python_opendota.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from python_opendota.exceptions import ApiAttributeError


def lazy_import():
    from python_opendota.model.match_response_chat import MatchResponseChat
    from python_opendota.model.match_response_draft_timings import MatchResponseDraftTimings
    from python_opendota.model.match_response_players import MatchResponsePlayers
    globals()['MatchResponseChat'] = MatchResponseChat
    globals()['MatchResponseDraftTimings'] = MatchResponseDraftTimings
    globals()['MatchResponsePlayers'] = MatchResponsePlayers


class MatchResponse(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'match_id': (int,),  # noqa: E501
            'barracks_status_dire': (int,),  # noqa: E501
            'barracks_status_radiant': (int,),  # noqa: E501
            'chat': ([MatchResponseChat],),  # noqa: E501
            'cluster': (int,),  # noqa: E501
            'cosmetics': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'dire_score': (int,),  # noqa: E501
            'draft_timings': ([MatchResponseDraftTimings],),  # noqa: E501
            'duration': (int,),  # noqa: E501
            'engine': (int,),  # noqa: E501
            'first_blood_time': (int,),  # noqa: E501
            'game_mode': (int,),  # noqa: E501
            'human_players': (int,),  # noqa: E501
            'leagueid': (int,),  # noqa: E501
            'lobby_type': (int,),  # noqa: E501
            'match_seq_num': (int,),  # noqa: E501
            'negative_votes': (int,),  # noqa: E501
            'objectives': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'picks_bans': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'positive_votes': (int,),  # noqa: E501
            'radiant_gold_adv': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'radiant_score': (int,),  # noqa: E501
            'radiant_win': (bool,),  # noqa: E501
            'radiant_xp_adv': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'start_time': (int,),  # noqa: E501
            'teamfights': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'tower_status_dire': (int,),  # noqa: E501
            'tower_status_radiant': (int,),  # noqa: E501
            'version': (int,),  # noqa: E501
            'replay_salt': (int,),  # noqa: E501
            'series_id': (int,),  # noqa: E501
            'series_type': (int,),  # noqa: E501
            'radiant_team': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'dire_team': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'league': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'skill': (int,),  # noqa: E501
            'players': ([MatchResponsePlayers],),  # noqa: E501
            'patch': (int,),  # noqa: E501
            'region': (int,),  # noqa: E501
            'all_word_counts': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'my_word_counts': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'throw': (int,),  # noqa: E501
            'comeback': (int,),  # noqa: E501
            'loss': (int,),  # noqa: E501
            'win': (int,),  # noqa: E501
            'replay_url': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'match_id': 'match_id',  # noqa: E501
        'barracks_status_dire': 'barracks_status_dire',  # noqa: E501
        'barracks_status_radiant': 'barracks_status_radiant',  # noqa: E501
        'chat': 'chat',  # noqa: E501
        'cluster': 'cluster',  # noqa: E501
        'cosmetics': 'cosmetics',  # noqa: E501
        'dire_score': 'dire_score',  # noqa: E501
        'draft_timings': 'draft_timings',  # noqa: E501
        'duration': 'duration',  # noqa: E501
        'engine': 'engine',  # noqa: E501
        'first_blood_time': 'first_blood_time',  # noqa: E501
        'game_mode': 'game_mode',  # noqa: E501
        'human_players': 'human_players',  # noqa: E501
        'leagueid': 'leagueid',  # noqa: E501
        'lobby_type': 'lobby_type',  # noqa: E501
        'match_seq_num': 'match_seq_num',  # noqa: E501
        'negative_votes': 'negative_votes',  # noqa: E501
        'objectives': 'objectives',  # noqa: E501
        'picks_bans': 'picks_bans',  # noqa: E501
        'positive_votes': 'positive_votes',  # noqa: E501
        'radiant_gold_adv': 'radiant_gold_adv',  # noqa: E501
        'radiant_score': 'radiant_score',  # noqa: E501
        'radiant_win': 'radiant_win',  # noqa: E501
        'radiant_xp_adv': 'radiant_xp_adv',  # noqa: E501
        'start_time': 'start_time',  # noqa: E501
        'teamfights': 'teamfights',  # noqa: E501
        'tower_status_dire': 'tower_status_dire',  # noqa: E501
        'tower_status_radiant': 'tower_status_radiant',  # noqa: E501
        'version': 'version',  # noqa: E501
        'replay_salt': 'replay_salt',  # noqa: E501
        'series_id': 'series_id',  # noqa: E501
        'series_type': 'series_type',  # noqa: E501
        'radiant_team': 'radiant_team',  # noqa: E501
        'dire_team': 'dire_team',  # noqa: E501
        'league': 'league',  # noqa: E501
        'skill': 'skill',  # noqa: E501
        'players': 'players',  # noqa: E501
        'patch': 'patch',  # noqa: E501
        'region': 'region',  # noqa: E501
        'all_word_counts': 'all_word_counts',  # noqa: E501
        'my_word_counts': 'my_word_counts',  # noqa: E501
        'throw': 'throw',  # noqa: E501
        'comeback': 'comeback',  # noqa: E501
        'loss': 'loss',  # noqa: E501
        'win': 'win',  # noqa: E501
        'replay_url': 'replay_url',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """MatchResponse - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            match_id (int): The ID number of the match assigned by Valve. [optional]  # noqa: E501
            barracks_status_dire (int): Bitmask. An integer that represents a binary of which barracks are still standing. 63 would mean all barracks still stand at the end of the game.. [optional]  # noqa: E501
            barracks_status_radiant (int): Bitmask. An integer that represents a binary of which barracks are still standing. 63 would mean all barracks still stand at the end of the game.. [optional]  # noqa: E501
            chat ([MatchResponseChat]): Array containing information on the chat of the game. [optional]  # noqa: E501
            cluster (int): cluster. [optional]  # noqa: E501
            cosmetics (bool, date, datetime, dict, float, int, list, str, none_type): cosmetics. [optional]  # noqa: E501
            dire_score (int): Final score for Dire (number of kills on Radiant). [optional]  # noqa: E501
            draft_timings ([MatchResponseDraftTimings]): draft_timings. [optional]  # noqa: E501
            duration (int): Duration of the game in seconds. [optional]  # noqa: E501
            engine (int): engine. [optional]  # noqa: E501
            first_blood_time (int): Time in seconds at which first blood occurred. [optional]  # noqa: E501
            game_mode (int): Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json. [optional]  # noqa: E501
            human_players (int): Number of human players in the game. [optional]  # noqa: E501
            leagueid (int): leagueid. [optional]  # noqa: E501
            lobby_type (int): Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json. [optional]  # noqa: E501
            match_seq_num (int): match_seq_num. [optional]  # noqa: E501
            negative_votes (int): Number of negative votes the replay received in the in-game client. [optional]  # noqa: E501
            objectives (bool, date, datetime, dict, float, int, list, str, none_type): objectives. [optional]  # noqa: E501
            picks_bans (bool, date, datetime, dict, float, int, list, str, none_type): Object containing information on the draft. Each pick/ban contains a boolean relating to whether the choice is a pick or a ban, the hero ID, the team the picked or banned it, and the order.. [optional]  # noqa: E501
            positive_votes (int): Number of positive votes the replay received in the in-game client. [optional]  # noqa: E501
            radiant_gold_adv (bool, date, datetime, dict, float, int, list, str, none_type): Array of the Radiant gold advantage at each minute in the game. A negative number means that Radiant is behind, and thus it is their gold disadvantage. . [optional]  # noqa: E501
            radiant_score (int): Final score for Radiant (number of kills on Radiant). [optional]  # noqa: E501
            radiant_win (bool): Boolean indicating whether Radiant won the match. [optional]  # noqa: E501
            radiant_xp_adv (bool, date, datetime, dict, float, int, list, str, none_type): Array of the Radiant experience advantage at each minute in the game. A negative number means that Radiant is behind, and thus it is their experience disadvantage. . [optional]  # noqa: E501
            start_time (int): The Unix timestamp at which the game started. [optional]  # noqa: E501
            teamfights (bool, date, datetime, dict, float, int, list, str, none_type): teamfights. [optional]  # noqa: E501
            tower_status_dire (int): Bitmask. An integer that represents a binary of which Dire towers are still standing.. [optional]  # noqa: E501
            tower_status_radiant (int): Bitmask. An integer that represents a binary of which Radiant towers are still standing.. [optional]  # noqa: E501
            version (int): Parse version, used internally by OpenDota. [optional]  # noqa: E501
            replay_salt (int): replay_salt. [optional]  # noqa: E501
            series_id (int): series_id. [optional]  # noqa: E501
            series_type (int): series_type. [optional]  # noqa: E501
            radiant_team (bool, date, datetime, dict, float, int, list, str, none_type): radiant_team. [optional]  # noqa: E501
            dire_team (bool, date, datetime, dict, float, int, list, str, none_type): dire_team. [optional]  # noqa: E501
            league (bool, date, datetime, dict, float, int, list, str, none_type): league. [optional]  # noqa: E501
            skill (int): Skill bracket assigned by Valve (Normal, High, Very High). [optional]  # noqa: E501
            players ([MatchResponsePlayers]): Array of information on individual players. [optional]  # noqa: E501
            patch (int): Information on the patch version the game is played on. [optional]  # noqa: E501
            region (int): Integer corresponding to the region the game was played on. [optional]  # noqa: E501
            all_word_counts (bool, date, datetime, dict, float, int, list, str, none_type): Word counts of the all chat messages in the player's games. [optional]  # noqa: E501
            my_word_counts (bool, date, datetime, dict, float, int, list, str, none_type): Word counts of the player's all chat messages. [optional]  # noqa: E501
            throw (int): Maximum gold advantage of the player's team if they lost the match. [optional]  # noqa: E501
            comeback (int): Maximum gold disadvantage of the player's team if they won the match. [optional]  # noqa: E501
            loss (int): Maximum gold disadvantage of the player's team if they lost the match. [optional]  # noqa: E501
            win (int): Maximum gold advantage of the player's team if they won the match. [optional]  # noqa: E501
            replay_url (str): replay_url. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """MatchResponse - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            match_id (int): The ID number of the match assigned by Valve. [optional]  # noqa: E501
            barracks_status_dire (int): Bitmask. An integer that represents a binary of which barracks are still standing. 63 would mean all barracks still stand at the end of the game.. [optional]  # noqa: E501
            barracks_status_radiant (int): Bitmask. An integer that represents a binary of which barracks are still standing. 63 would mean all barracks still stand at the end of the game.. [optional]  # noqa: E501
            chat ([MatchResponseChat]): Array containing information on the chat of the game. [optional]  # noqa: E501
            cluster (int): cluster. [optional]  # noqa: E501
            cosmetics (bool, date, datetime, dict, float, int, list, str, none_type): cosmetics. [optional]  # noqa: E501
            dire_score (int): Final score for Dire (number of kills on Radiant). [optional]  # noqa: E501
            draft_timings ([MatchResponseDraftTimings]): draft_timings. [optional]  # noqa: E501
            duration (int): Duration of the game in seconds. [optional]  # noqa: E501
            engine (int): engine. [optional]  # noqa: E501
            first_blood_time (int): Time in seconds at which first blood occurred. [optional]  # noqa: E501
            game_mode (int): Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json. [optional]  # noqa: E501
            human_players (int): Number of human players in the game. [optional]  # noqa: E501
            leagueid (int): leagueid. [optional]  # noqa: E501
            lobby_type (int): Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json. [optional]  # noqa: E501
            match_seq_num (int): match_seq_num. [optional]  # noqa: E501
            negative_votes (int): Number of negative votes the replay received in the in-game client. [optional]  # noqa: E501
            objectives (bool, date, datetime, dict, float, int, list, str, none_type): objectives. [optional]  # noqa: E501
            picks_bans (bool, date, datetime, dict, float, int, list, str, none_type): Object containing information on the draft. Each pick/ban contains a boolean relating to whether the choice is a pick or a ban, the hero ID, the team the picked or banned it, and the order.. [optional]  # noqa: E501
            positive_votes (int): Number of positive votes the replay received in the in-game client. [optional]  # noqa: E501
            radiant_gold_adv (bool, date, datetime, dict, float, int, list, str, none_type): Array of the Radiant gold advantage at each minute in the game. A negative number means that Radiant is behind, and thus it is their gold disadvantage. . [optional]  # noqa: E501
            radiant_score (int): Final score for Radiant (number of kills on Radiant). [optional]  # noqa: E501
            radiant_win (bool): Boolean indicating whether Radiant won the match. [optional]  # noqa: E501
            radiant_xp_adv (bool, date, datetime, dict, float, int, list, str, none_type): Array of the Radiant experience advantage at each minute in the game. A negative number means that Radiant is behind, and thus it is their experience disadvantage. . [optional]  # noqa: E501
            start_time (int): The Unix timestamp at which the game started. [optional]  # noqa: E501
            teamfights (bool, date, datetime, dict, float, int, list, str, none_type): teamfights. [optional]  # noqa: E501
            tower_status_dire (int): Bitmask. An integer that represents a binary of which Dire towers are still standing.. [optional]  # noqa: E501
            tower_status_radiant (int): Bitmask. An integer that represents a binary of which Radiant towers are still standing.. [optional]  # noqa: E501
            version (int): Parse version, used internally by OpenDota. [optional]  # noqa: E501
            replay_salt (int): replay_salt. [optional]  # noqa: E501
            series_id (int): series_id. [optional]  # noqa: E501
            series_type (int): series_type. [optional]  # noqa: E501
            radiant_team (bool, date, datetime, dict, float, int, list, str, none_type): radiant_team. [optional]  # noqa: E501
            dire_team (bool, date, datetime, dict, float, int, list, str, none_type): dire_team. [optional]  # noqa: E501
            league (bool, date, datetime, dict, float, int, list, str, none_type): league. [optional]  # noqa: E501
            skill (int): Skill bracket assigned by Valve (Normal, High, Very High). [optional]  # noqa: E501
            players ([MatchResponsePlayers]): Array of information on individual players. [optional]  # noqa: E501
            patch (int): Information on the patch version the game is played on. [optional]  # noqa: E501
            region (int): Integer corresponding to the region the game was played on. [optional]  # noqa: E501
            all_word_counts (bool, date, datetime, dict, float, int, list, str, none_type): Word counts of the all chat messages in the player's games. [optional]  # noqa: E501
            my_word_counts (bool, date, datetime, dict, float, int, list, str, none_type): Word counts of the player's all chat messages. [optional]  # noqa: E501
            throw (int): Maximum gold advantage of the player's team if they lost the match. [optional]  # noqa: E501
            comeback (int): Maximum gold disadvantage of the player's team if they won the match. [optional]  # noqa: E501
            loss (int): Maximum gold disadvantage of the player's team if they lost the match. [optional]  # noqa: E501
            win (int): Maximum gold advantage of the player's team if they won the match. [optional]  # noqa: E501
            replay_url (str): replay_url. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
