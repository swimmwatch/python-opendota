"""
    OpenDota API

    # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.   # noqa: E501

    The version of the OpenAPI document: 18.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from python_opendota.api_client import ApiClient, Endpoint as _Endpoint
from python_opendota.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from python_opendota.model.player_counts_response import PlayerCountsResponse
from python_opendota.model.player_heroes_response import PlayerHeroesResponse
from python_opendota.model.player_matches_response import PlayerMatchesResponse
from python_opendota.model.player_peers_response import PlayerPeersResponse
from python_opendota.model.player_pros_response import PlayerProsResponse
from python_opendota.model.player_rankings_response import PlayerRankingsResponse
from python_opendota.model.player_ratings_response import PlayerRatingsResponse
from python_opendota.model.player_recent_matches_response import PlayerRecentMatchesResponse
from python_opendota.model.player_response import PlayerResponse
from python_opendota.model.player_totals_response import PlayerTotalsResponse
from python_opendota.model.player_ward_map_response import PlayerWardMapResponse
from python_opendota.model.player_win_loss_response import PlayerWinLossResponse
from python_opendota.model.player_word_cloud_response import PlayerWordCloudResponse


class PlayersApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.players_account_id_counts_get_endpoint = _Endpoint(
            settings={
                'response_type': (PlayerCountsResponse,),
                'auth': [],
                'endpoint_path': '/players/{account_id}/counts',
                'operation_id': 'players_account_id_counts_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                    'limit',
                    'offset',
                    'win',
                    'patch',
                    'game_mode',
                    'lobby_type',
                    'region',
                    'date',
                    'lane_role',
                    'hero_id',
                    'is_radiant',
                    'included_account_id',
                    'excluded_account_id',
                    'with_hero_id',
                    'against_hero_id',
                    'significant',
                    'having',
                    'sort',
                ],
                'required': [
                    'account_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (int,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'win':
                        (int,),
                    'patch':
                        (int,),
                    'game_mode':
                        (int,),
                    'lobby_type':
                        (int,),
                    'region':
                        (int,),
                    'date':
                        (int,),
                    'lane_role':
                        (int,),
                    'hero_id':
                        (int,),
                    'is_radiant':
                        (int,),
                    'included_account_id':
                        (int,),
                    'excluded_account_id':
                        (int,),
                    'with_hero_id':
                        (int,),
                    'against_hero_id':
                        (int,),
                    'significant':
                        (int,),
                    'having':
                        (int,),
                    'sort':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'account_id',
                    'limit': 'limit',
                    'offset': 'offset',
                    'win': 'win',
                    'patch': 'patch',
                    'game_mode': 'game_mode',
                    'lobby_type': 'lobby_type',
                    'region': 'region',
                    'date': 'date',
                    'lane_role': 'lane_role',
                    'hero_id': 'hero_id',
                    'is_radiant': 'is_radiant',
                    'included_account_id': 'included_account_id',
                    'excluded_account_id': 'excluded_account_id',
                    'with_hero_id': 'with_hero_id',
                    'against_hero_id': 'against_hero_id',
                    'significant': 'significant',
                    'having': 'having',
                    'sort': 'sort',
                },
                'location_map': {
                    'account_id': 'path',
                    'limit': 'query',
                    'offset': 'query',
                    'win': 'query',
                    'patch': 'query',
                    'game_mode': 'query',
                    'lobby_type': 'query',
                    'region': 'query',
                    'date': 'query',
                    'lane_role': 'query',
                    'hero_id': 'query',
                    'is_radiant': 'query',
                    'included_account_id': 'query',
                    'excluded_account_id': 'query',
                    'with_hero_id': 'query',
                    'against_hero_id': 'query',
                    'significant': 'query',
                    'having': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.players_account_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (PlayerResponse,),
                'auth': [],
                'endpoint_path': '/players/{account_id}',
                'operation_id': 'players_account_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                ],
                'required': [
                    'account_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (int,),
                },
                'attribute_map': {
                    'account_id': 'account_id',
                },
                'location_map': {
                    'account_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.players_account_id_heroes_get_endpoint = _Endpoint(
            settings={
                'response_type': ([PlayerHeroesResponse],),
                'auth': [],
                'endpoint_path': '/players/{account_id}/heroes',
                'operation_id': 'players_account_id_heroes_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                    'limit',
                    'offset',
                    'win',
                    'patch',
                    'game_mode',
                    'lobby_type',
                    'region',
                    'date',
                    'lane_role',
                    'hero_id',
                    'is_radiant',
                    'included_account_id',
                    'excluded_account_id',
                    'with_hero_id',
                    'against_hero_id',
                    'significant',
                    'having',
                    'sort',
                ],
                'required': [
                    'account_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (int,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'win':
                        (int,),
                    'patch':
                        (int,),
                    'game_mode':
                        (int,),
                    'lobby_type':
                        (int,),
                    'region':
                        (int,),
                    'date':
                        (int,),
                    'lane_role':
                        (int,),
                    'hero_id':
                        (int,),
                    'is_radiant':
                        (int,),
                    'included_account_id':
                        (int,),
                    'excluded_account_id':
                        (int,),
                    'with_hero_id':
                        (int,),
                    'against_hero_id':
                        (int,),
                    'significant':
                        (int,),
                    'having':
                        (int,),
                    'sort':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'account_id',
                    'limit': 'limit',
                    'offset': 'offset',
                    'win': 'win',
                    'patch': 'patch',
                    'game_mode': 'game_mode',
                    'lobby_type': 'lobby_type',
                    'region': 'region',
                    'date': 'date',
                    'lane_role': 'lane_role',
                    'hero_id': 'hero_id',
                    'is_radiant': 'is_radiant',
                    'included_account_id': 'included_account_id',
                    'excluded_account_id': 'excluded_account_id',
                    'with_hero_id': 'with_hero_id',
                    'against_hero_id': 'against_hero_id',
                    'significant': 'significant',
                    'having': 'having',
                    'sort': 'sort',
                },
                'location_map': {
                    'account_id': 'path',
                    'limit': 'query',
                    'offset': 'query',
                    'win': 'query',
                    'patch': 'query',
                    'game_mode': 'query',
                    'lobby_type': 'query',
                    'region': 'query',
                    'date': 'query',
                    'lane_role': 'query',
                    'hero_id': 'query',
                    'is_radiant': 'query',
                    'included_account_id': 'query',
                    'excluded_account_id': 'query',
                    'with_hero_id': 'query',
                    'against_hero_id': 'query',
                    'significant': 'query',
                    'having': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.players_account_id_histograms_field_get_endpoint = _Endpoint(
            settings={
                'response_type': ([bool, date, datetime, dict, float, int, list, str, none_type],),
                'auth': [],
                'endpoint_path': '/players/{account_id}/histograms/{field}',
                'operation_id': 'players_account_id_histograms_field_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                    'field',
                    'limit',
                    'offset',
                    'win',
                    'patch',
                    'game_mode',
                    'lobby_type',
                    'region',
                    'date',
                    'lane_role',
                    'hero_id',
                    'is_radiant',
                    'included_account_id',
                    'excluded_account_id',
                    'with_hero_id',
                    'against_hero_id',
                    'significant',
                    'having',
                    'sort',
                ],
                'required': [
                    'account_id',
                    'field',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (int,),
                    'field':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'win':
                        (int,),
                    'patch':
                        (int,),
                    'game_mode':
                        (int,),
                    'lobby_type':
                        (int,),
                    'region':
                        (int,),
                    'date':
                        (int,),
                    'lane_role':
                        (int,),
                    'hero_id':
                        (int,),
                    'is_radiant':
                        (int,),
                    'included_account_id':
                        (int,),
                    'excluded_account_id':
                        (int,),
                    'with_hero_id':
                        (int,),
                    'against_hero_id':
                        (int,),
                    'significant':
                        (int,),
                    'having':
                        (int,),
                    'sort':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'account_id',
                    'field': 'field',
                    'limit': 'limit',
                    'offset': 'offset',
                    'win': 'win',
                    'patch': 'patch',
                    'game_mode': 'game_mode',
                    'lobby_type': 'lobby_type',
                    'region': 'region',
                    'date': 'date',
                    'lane_role': 'lane_role',
                    'hero_id': 'hero_id',
                    'is_radiant': 'is_radiant',
                    'included_account_id': 'included_account_id',
                    'excluded_account_id': 'excluded_account_id',
                    'with_hero_id': 'with_hero_id',
                    'against_hero_id': 'against_hero_id',
                    'significant': 'significant',
                    'having': 'having',
                    'sort': 'sort',
                },
                'location_map': {
                    'account_id': 'path',
                    'field': 'path',
                    'limit': 'query',
                    'offset': 'query',
                    'win': 'query',
                    'patch': 'query',
                    'game_mode': 'query',
                    'lobby_type': 'query',
                    'region': 'query',
                    'date': 'query',
                    'lane_role': 'query',
                    'hero_id': 'query',
                    'is_radiant': 'query',
                    'included_account_id': 'query',
                    'excluded_account_id': 'query',
                    'with_hero_id': 'query',
                    'against_hero_id': 'query',
                    'significant': 'query',
                    'having': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.players_account_id_matches_get_endpoint = _Endpoint(
            settings={
                'response_type': ([PlayerMatchesResponse],),
                'auth': [],
                'endpoint_path': '/players/{account_id}/matches',
                'operation_id': 'players_account_id_matches_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                    'limit',
                    'offset',
                    'win',
                    'patch',
                    'game_mode',
                    'lobby_type',
                    'region',
                    'date',
                    'lane_role',
                    'hero_id',
                    'is_radiant',
                    'included_account_id',
                    'excluded_account_id',
                    'with_hero_id',
                    'against_hero_id',
                    'significant',
                    'having',
                    'sort',
                    'project',
                ],
                'required': [
                    'account_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (int,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'win':
                        (int,),
                    'patch':
                        (int,),
                    'game_mode':
                        (int,),
                    'lobby_type':
                        (int,),
                    'region':
                        (int,),
                    'date':
                        (int,),
                    'lane_role':
                        (int,),
                    'hero_id':
                        (int,),
                    'is_radiant':
                        (int,),
                    'included_account_id':
                        (int,),
                    'excluded_account_id':
                        (int,),
                    'with_hero_id':
                        (int,),
                    'against_hero_id':
                        (int,),
                    'significant':
                        (int,),
                    'having':
                        (int,),
                    'sort':
                        (str,),
                    'project':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'account_id',
                    'limit': 'limit',
                    'offset': 'offset',
                    'win': 'win',
                    'patch': 'patch',
                    'game_mode': 'game_mode',
                    'lobby_type': 'lobby_type',
                    'region': 'region',
                    'date': 'date',
                    'lane_role': 'lane_role',
                    'hero_id': 'hero_id',
                    'is_radiant': 'is_radiant',
                    'included_account_id': 'included_account_id',
                    'excluded_account_id': 'excluded_account_id',
                    'with_hero_id': 'with_hero_id',
                    'against_hero_id': 'against_hero_id',
                    'significant': 'significant',
                    'having': 'having',
                    'sort': 'sort',
                    'project': 'project',
                },
                'location_map': {
                    'account_id': 'path',
                    'limit': 'query',
                    'offset': 'query',
                    'win': 'query',
                    'patch': 'query',
                    'game_mode': 'query',
                    'lobby_type': 'query',
                    'region': 'query',
                    'date': 'query',
                    'lane_role': 'query',
                    'hero_id': 'query',
                    'is_radiant': 'query',
                    'included_account_id': 'query',
                    'excluded_account_id': 'query',
                    'with_hero_id': 'query',
                    'against_hero_id': 'query',
                    'significant': 'query',
                    'having': 'query',
                    'sort': 'query',
                    'project': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.players_account_id_peers_get_endpoint = _Endpoint(
            settings={
                'response_type': ([PlayerPeersResponse],),
                'auth': [],
                'endpoint_path': '/players/{account_id}/peers',
                'operation_id': 'players_account_id_peers_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                    'limit',
                    'offset',
                    'win',
                    'patch',
                    'game_mode',
                    'lobby_type',
                    'region',
                    'date',
                    'lane_role',
                    'hero_id',
                    'is_radiant',
                    'included_account_id',
                    'excluded_account_id',
                    'with_hero_id',
                    'against_hero_id',
                    'significant',
                    'having',
                    'sort',
                ],
                'required': [
                    'account_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (int,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'win':
                        (int,),
                    'patch':
                        (int,),
                    'game_mode':
                        (int,),
                    'lobby_type':
                        (int,),
                    'region':
                        (int,),
                    'date':
                        (int,),
                    'lane_role':
                        (int,),
                    'hero_id':
                        (int,),
                    'is_radiant':
                        (int,),
                    'included_account_id':
                        (int,),
                    'excluded_account_id':
                        (int,),
                    'with_hero_id':
                        (int,),
                    'against_hero_id':
                        (int,),
                    'significant':
                        (int,),
                    'having':
                        (int,),
                    'sort':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'account_id',
                    'limit': 'limit',
                    'offset': 'offset',
                    'win': 'win',
                    'patch': 'patch',
                    'game_mode': 'game_mode',
                    'lobby_type': 'lobby_type',
                    'region': 'region',
                    'date': 'date',
                    'lane_role': 'lane_role',
                    'hero_id': 'hero_id',
                    'is_radiant': 'is_radiant',
                    'included_account_id': 'included_account_id',
                    'excluded_account_id': 'excluded_account_id',
                    'with_hero_id': 'with_hero_id',
                    'against_hero_id': 'against_hero_id',
                    'significant': 'significant',
                    'having': 'having',
                    'sort': 'sort',
                },
                'location_map': {
                    'account_id': 'path',
                    'limit': 'query',
                    'offset': 'query',
                    'win': 'query',
                    'patch': 'query',
                    'game_mode': 'query',
                    'lobby_type': 'query',
                    'region': 'query',
                    'date': 'query',
                    'lane_role': 'query',
                    'hero_id': 'query',
                    'is_radiant': 'query',
                    'included_account_id': 'query',
                    'excluded_account_id': 'query',
                    'with_hero_id': 'query',
                    'against_hero_id': 'query',
                    'significant': 'query',
                    'having': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.players_account_id_pros_get_endpoint = _Endpoint(
            settings={
                'response_type': ([PlayerProsResponse],),
                'auth': [],
                'endpoint_path': '/players/{account_id}/pros',
                'operation_id': 'players_account_id_pros_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                    'limit',
                    'offset',
                    'win',
                    'patch',
                    'game_mode',
                    'lobby_type',
                    'region',
                    'date',
                    'lane_role',
                    'hero_id',
                    'is_radiant',
                    'included_account_id',
                    'excluded_account_id',
                    'with_hero_id',
                    'against_hero_id',
                    'significant',
                    'having',
                    'sort',
                ],
                'required': [
                    'account_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (int,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'win':
                        (int,),
                    'patch':
                        (int,),
                    'game_mode':
                        (int,),
                    'lobby_type':
                        (int,),
                    'region':
                        (int,),
                    'date':
                        (int,),
                    'lane_role':
                        (int,),
                    'hero_id':
                        (int,),
                    'is_radiant':
                        (int,),
                    'included_account_id':
                        (int,),
                    'excluded_account_id':
                        (int,),
                    'with_hero_id':
                        (int,),
                    'against_hero_id':
                        (int,),
                    'significant':
                        (int,),
                    'having':
                        (int,),
                    'sort':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'account_id',
                    'limit': 'limit',
                    'offset': 'offset',
                    'win': 'win',
                    'patch': 'patch',
                    'game_mode': 'game_mode',
                    'lobby_type': 'lobby_type',
                    'region': 'region',
                    'date': 'date',
                    'lane_role': 'lane_role',
                    'hero_id': 'hero_id',
                    'is_radiant': 'is_radiant',
                    'included_account_id': 'included_account_id',
                    'excluded_account_id': 'excluded_account_id',
                    'with_hero_id': 'with_hero_id',
                    'against_hero_id': 'against_hero_id',
                    'significant': 'significant',
                    'having': 'having',
                    'sort': 'sort',
                },
                'location_map': {
                    'account_id': 'path',
                    'limit': 'query',
                    'offset': 'query',
                    'win': 'query',
                    'patch': 'query',
                    'game_mode': 'query',
                    'lobby_type': 'query',
                    'region': 'query',
                    'date': 'query',
                    'lane_role': 'query',
                    'hero_id': 'query',
                    'is_radiant': 'query',
                    'included_account_id': 'query',
                    'excluded_account_id': 'query',
                    'with_hero_id': 'query',
                    'against_hero_id': 'query',
                    'significant': 'query',
                    'having': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.players_account_id_rankings_get_endpoint = _Endpoint(
            settings={
                'response_type': ([PlayerRankingsResponse],),
                'auth': [],
                'endpoint_path': '/players/{account_id}/rankings',
                'operation_id': 'players_account_id_rankings_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                ],
                'required': [
                    'account_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (int,),
                },
                'attribute_map': {
                    'account_id': 'account_id',
                },
                'location_map': {
                    'account_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.players_account_id_ratings_get_endpoint = _Endpoint(
            settings={
                'response_type': ([PlayerRatingsResponse],),
                'auth': [],
                'endpoint_path': '/players/{account_id}/ratings',
                'operation_id': 'players_account_id_ratings_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                ],
                'required': [
                    'account_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (int,),
                },
                'attribute_map': {
                    'account_id': 'account_id',
                },
                'location_map': {
                    'account_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.players_account_id_recent_matches_get_endpoint = _Endpoint(
            settings={
                'response_type': ([PlayerRecentMatchesResponse],),
                'auth': [],
                'endpoint_path': '/players/{account_id}/recentMatches',
                'operation_id': 'players_account_id_recent_matches_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                ],
                'required': [
                    'account_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (int,),
                },
                'attribute_map': {
                    'account_id': 'account_id',
                },
                'location_map': {
                    'account_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.players_account_id_refresh_post_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/players/{account_id}/refresh',
                'operation_id': 'players_account_id_refresh_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                ],
                'required': [
                    'account_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (int,),
                },
                'attribute_map': {
                    'account_id': 'account_id',
                },
                'location_map': {
                    'account_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.players_account_id_totals_get_endpoint = _Endpoint(
            settings={
                'response_type': ([PlayerTotalsResponse],),
                'auth': [],
                'endpoint_path': '/players/{account_id}/totals',
                'operation_id': 'players_account_id_totals_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                    'limit',
                    'offset',
                    'win',
                    'patch',
                    'game_mode',
                    'lobby_type',
                    'region',
                    'date',
                    'lane_role',
                    'hero_id',
                    'is_radiant',
                    'included_account_id',
                    'excluded_account_id',
                    'with_hero_id',
                    'against_hero_id',
                    'significant',
                    'having',
                    'sort',
                ],
                'required': [
                    'account_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (int,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'win':
                        (int,),
                    'patch':
                        (int,),
                    'game_mode':
                        (int,),
                    'lobby_type':
                        (int,),
                    'region':
                        (int,),
                    'date':
                        (int,),
                    'lane_role':
                        (int,),
                    'hero_id':
                        (int,),
                    'is_radiant':
                        (int,),
                    'included_account_id':
                        (int,),
                    'excluded_account_id':
                        (int,),
                    'with_hero_id':
                        (int,),
                    'against_hero_id':
                        (int,),
                    'significant':
                        (int,),
                    'having':
                        (int,),
                    'sort':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'account_id',
                    'limit': 'limit',
                    'offset': 'offset',
                    'win': 'win',
                    'patch': 'patch',
                    'game_mode': 'game_mode',
                    'lobby_type': 'lobby_type',
                    'region': 'region',
                    'date': 'date',
                    'lane_role': 'lane_role',
                    'hero_id': 'hero_id',
                    'is_radiant': 'is_radiant',
                    'included_account_id': 'included_account_id',
                    'excluded_account_id': 'excluded_account_id',
                    'with_hero_id': 'with_hero_id',
                    'against_hero_id': 'against_hero_id',
                    'significant': 'significant',
                    'having': 'having',
                    'sort': 'sort',
                },
                'location_map': {
                    'account_id': 'path',
                    'limit': 'query',
                    'offset': 'query',
                    'win': 'query',
                    'patch': 'query',
                    'game_mode': 'query',
                    'lobby_type': 'query',
                    'region': 'query',
                    'date': 'query',
                    'lane_role': 'query',
                    'hero_id': 'query',
                    'is_radiant': 'query',
                    'included_account_id': 'query',
                    'excluded_account_id': 'query',
                    'with_hero_id': 'query',
                    'against_hero_id': 'query',
                    'significant': 'query',
                    'having': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.players_account_id_wardmap_get_endpoint = _Endpoint(
            settings={
                'response_type': (PlayerWardMapResponse,),
                'auth': [],
                'endpoint_path': '/players/{account_id}/wardmap',
                'operation_id': 'players_account_id_wardmap_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                    'limit',
                    'offset',
                    'win',
                    'patch',
                    'game_mode',
                    'lobby_type',
                    'region',
                    'date',
                    'lane_role',
                    'hero_id',
                    'is_radiant',
                    'included_account_id',
                    'excluded_account_id',
                    'with_hero_id',
                    'against_hero_id',
                    'significant',
                    'having',
                    'sort',
                ],
                'required': [
                    'account_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (int,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'win':
                        (int,),
                    'patch':
                        (int,),
                    'game_mode':
                        (int,),
                    'lobby_type':
                        (int,),
                    'region':
                        (int,),
                    'date':
                        (int,),
                    'lane_role':
                        (int,),
                    'hero_id':
                        (int,),
                    'is_radiant':
                        (int,),
                    'included_account_id':
                        (int,),
                    'excluded_account_id':
                        (int,),
                    'with_hero_id':
                        (int,),
                    'against_hero_id':
                        (int,),
                    'significant':
                        (int,),
                    'having':
                        (int,),
                    'sort':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'account_id',
                    'limit': 'limit',
                    'offset': 'offset',
                    'win': 'win',
                    'patch': 'patch',
                    'game_mode': 'game_mode',
                    'lobby_type': 'lobby_type',
                    'region': 'region',
                    'date': 'date',
                    'lane_role': 'lane_role',
                    'hero_id': 'hero_id',
                    'is_radiant': 'is_radiant',
                    'included_account_id': 'included_account_id',
                    'excluded_account_id': 'excluded_account_id',
                    'with_hero_id': 'with_hero_id',
                    'against_hero_id': 'against_hero_id',
                    'significant': 'significant',
                    'having': 'having',
                    'sort': 'sort',
                },
                'location_map': {
                    'account_id': 'path',
                    'limit': 'query',
                    'offset': 'query',
                    'win': 'query',
                    'patch': 'query',
                    'game_mode': 'query',
                    'lobby_type': 'query',
                    'region': 'query',
                    'date': 'query',
                    'lane_role': 'query',
                    'hero_id': 'query',
                    'is_radiant': 'query',
                    'included_account_id': 'query',
                    'excluded_account_id': 'query',
                    'with_hero_id': 'query',
                    'against_hero_id': 'query',
                    'significant': 'query',
                    'having': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.players_account_id_wl_get_endpoint = _Endpoint(
            settings={
                'response_type': (PlayerWinLossResponse,),
                'auth': [],
                'endpoint_path': '/players/{account_id}/wl',
                'operation_id': 'players_account_id_wl_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                    'limit',
                    'offset',
                    'win',
                    'patch',
                    'game_mode',
                    'lobby_type',
                    'region',
                    'date',
                    'lane_role',
                    'hero_id',
                    'is_radiant',
                    'included_account_id',
                    'excluded_account_id',
                    'with_hero_id',
                    'against_hero_id',
                    'significant',
                    'having',
                    'sort',
                ],
                'required': [
                    'account_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (int,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'win':
                        (int,),
                    'patch':
                        (int,),
                    'game_mode':
                        (int,),
                    'lobby_type':
                        (int,),
                    'region':
                        (int,),
                    'date':
                        (int,),
                    'lane_role':
                        (int,),
                    'hero_id':
                        (int,),
                    'is_radiant':
                        (int,),
                    'included_account_id':
                        (int,),
                    'excluded_account_id':
                        (int,),
                    'with_hero_id':
                        (int,),
                    'against_hero_id':
                        (int,),
                    'significant':
                        (int,),
                    'having':
                        (int,),
                    'sort':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'account_id',
                    'limit': 'limit',
                    'offset': 'offset',
                    'win': 'win',
                    'patch': 'patch',
                    'game_mode': 'game_mode',
                    'lobby_type': 'lobby_type',
                    'region': 'region',
                    'date': 'date',
                    'lane_role': 'lane_role',
                    'hero_id': 'hero_id',
                    'is_radiant': 'is_radiant',
                    'included_account_id': 'included_account_id',
                    'excluded_account_id': 'excluded_account_id',
                    'with_hero_id': 'with_hero_id',
                    'against_hero_id': 'against_hero_id',
                    'significant': 'significant',
                    'having': 'having',
                    'sort': 'sort',
                },
                'location_map': {
                    'account_id': 'path',
                    'limit': 'query',
                    'offset': 'query',
                    'win': 'query',
                    'patch': 'query',
                    'game_mode': 'query',
                    'lobby_type': 'query',
                    'region': 'query',
                    'date': 'query',
                    'lane_role': 'query',
                    'hero_id': 'query',
                    'is_radiant': 'query',
                    'included_account_id': 'query',
                    'excluded_account_id': 'query',
                    'with_hero_id': 'query',
                    'against_hero_id': 'query',
                    'significant': 'query',
                    'having': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.players_account_id_wordcloud_get_endpoint = _Endpoint(
            settings={
                'response_type': (PlayerWordCloudResponse,),
                'auth': [],
                'endpoint_path': '/players/{account_id}/wordcloud',
                'operation_id': 'players_account_id_wordcloud_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                    'limit',
                    'offset',
                    'win',
                    'patch',
                    'game_mode',
                    'lobby_type',
                    'region',
                    'date',
                    'lane_role',
                    'hero_id',
                    'is_radiant',
                    'included_account_id',
                    'excluded_account_id',
                    'with_hero_id',
                    'against_hero_id',
                    'significant',
                    'having',
                    'sort',
                ],
                'required': [
                    'account_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (int,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'win':
                        (int,),
                    'patch':
                        (int,),
                    'game_mode':
                        (int,),
                    'lobby_type':
                        (int,),
                    'region':
                        (int,),
                    'date':
                        (int,),
                    'lane_role':
                        (int,),
                    'hero_id':
                        (int,),
                    'is_radiant':
                        (int,),
                    'included_account_id':
                        (int,),
                    'excluded_account_id':
                        (int,),
                    'with_hero_id':
                        (int,),
                    'against_hero_id':
                        (int,),
                    'significant':
                        (int,),
                    'having':
                        (int,),
                    'sort':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'account_id',
                    'limit': 'limit',
                    'offset': 'offset',
                    'win': 'win',
                    'patch': 'patch',
                    'game_mode': 'game_mode',
                    'lobby_type': 'lobby_type',
                    'region': 'region',
                    'date': 'date',
                    'lane_role': 'lane_role',
                    'hero_id': 'hero_id',
                    'is_radiant': 'is_radiant',
                    'included_account_id': 'included_account_id',
                    'excluded_account_id': 'excluded_account_id',
                    'with_hero_id': 'with_hero_id',
                    'against_hero_id': 'against_hero_id',
                    'significant': 'significant',
                    'having': 'having',
                    'sort': 'sort',
                },
                'location_map': {
                    'account_id': 'path',
                    'limit': 'query',
                    'offset': 'query',
                    'win': 'query',
                    'patch': 'query',
                    'game_mode': 'query',
                    'lobby_type': 'query',
                    'region': 'query',
                    'date': 'query',
                    'lane_role': 'query',
                    'hero_id': 'query',
                    'is_radiant': 'query',
                    'included_account_id': 'query',
                    'excluded_account_id': 'query',
                    'with_hero_id': 'query',
                    'against_hero_id': 'query',
                    'significant': 'query',
                    'having': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def players_account_id_counts_get(
        self,
        account_id,
        **kwargs
    ):
        """GET /players/{account_id}/counts  # noqa: E501

        Counts in categories  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.players_account_id_counts_get(account_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (int): Steam32 account ID

        Keyword Args:
            limit (int): Number of matches to limit to. [optional]
            offset (int): Number of matches to offset start by. [optional]
            win (int): Whether the player won. [optional]
            patch (int): Patch ID. [optional]
            game_mode (int): Game Mode ID. [optional]
            lobby_type (int): Lobby type ID. [optional]
            region (int): Region ID. [optional]
            date (int): Days previous. [optional]
            lane_role (int): Lane Role ID. [optional]
            hero_id (int): Hero ID. [optional]
            is_radiant (int): Whether the player was radiant. [optional]
            included_account_id (int): Account IDs in the match (array). [optional]
            excluded_account_id (int): Account IDs not in the match (array). [optional]
            with_hero_id (int): Hero IDs on the player's team (array). [optional]
            against_hero_id (int): Hero IDs against the player's team (array). [optional]
            significant (int): Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches.. [optional]
            having (int): The minimum number of games played, for filtering hero stats. [optional]
            sort (str): The field to return matches sorted by in descending order. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PlayerCountsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        return self.players_account_id_counts_get_endpoint.call_with_http_info(**kwargs)

    def players_account_id_get(
        self,
        account_id,
        **kwargs
    ):
        """GET /players/{account_id}  # noqa: E501

        Player data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.players_account_id_get(account_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (int): Steam32 account ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PlayerResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        return self.players_account_id_get_endpoint.call_with_http_info(**kwargs)

    def players_account_id_heroes_get(
        self,
        account_id,
        **kwargs
    ):
        """GET /players/{account_id}/heroes  # noqa: E501

        Heroes played  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.players_account_id_heroes_get(account_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (int): Steam32 account ID

        Keyword Args:
            limit (int): Number of matches to limit to. [optional]
            offset (int): Number of matches to offset start by. [optional]
            win (int): Whether the player won. [optional]
            patch (int): Patch ID. [optional]
            game_mode (int): Game Mode ID. [optional]
            lobby_type (int): Lobby type ID. [optional]
            region (int): Region ID. [optional]
            date (int): Days previous. [optional]
            lane_role (int): Lane Role ID. [optional]
            hero_id (int): Hero ID. [optional]
            is_radiant (int): Whether the player was radiant. [optional]
            included_account_id (int): Account IDs in the match (array). [optional]
            excluded_account_id (int): Account IDs not in the match (array). [optional]
            with_hero_id (int): Hero IDs on the player's team (array). [optional]
            against_hero_id (int): Hero IDs against the player's team (array). [optional]
            significant (int): Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches.. [optional]
            having (int): The minimum number of games played, for filtering hero stats. [optional]
            sort (str): The field to return matches sorted by in descending order. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [PlayerHeroesResponse]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        return self.players_account_id_heroes_get_endpoint.call_with_http_info(**kwargs)

    def players_account_id_histograms_field_get(
        self,
        account_id,
        field,
        **kwargs
    ):
        """GET /players/{account_id}/histograms  # noqa: E501

        Distribution of matches in a single stat  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.players_account_id_histograms_field_get(account_id, field, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (int): Steam32 account ID
            field (str): Field to aggregate on

        Keyword Args:
            limit (int): Number of matches to limit to. [optional]
            offset (int): Number of matches to offset start by. [optional]
            win (int): Whether the player won. [optional]
            patch (int): Patch ID. [optional]
            game_mode (int): Game Mode ID. [optional]
            lobby_type (int): Lobby type ID. [optional]
            region (int): Region ID. [optional]
            date (int): Days previous. [optional]
            lane_role (int): Lane Role ID. [optional]
            hero_id (int): Hero ID. [optional]
            is_radiant (int): Whether the player was radiant. [optional]
            included_account_id (int): Account IDs in the match (array). [optional]
            excluded_account_id (int): Account IDs not in the match (array). [optional]
            with_hero_id (int): Hero IDs on the player's team (array). [optional]
            against_hero_id (int): Hero IDs against the player's team (array). [optional]
            significant (int): Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches.. [optional]
            having (int): The minimum number of games played, for filtering hero stats. [optional]
            sort (str): The field to return matches sorted by in descending order. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [bool, date, datetime, dict, float, int, list, str, none_type]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        kwargs['field'] = \
            field
        return self.players_account_id_histograms_field_get_endpoint.call_with_http_info(**kwargs)

    def players_account_id_matches_get(
        self,
        account_id,
        **kwargs
    ):
        """GET /players/{account_id}/matches  # noqa: E501

        Matches played  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.players_account_id_matches_get(account_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (int): Steam32 account ID

        Keyword Args:
            limit (int): Number of matches to limit to. [optional]
            offset (int): Number of matches to offset start by. [optional]
            win (int): Whether the player won. [optional]
            patch (int): Patch ID. [optional]
            game_mode (int): Game Mode ID. [optional]
            lobby_type (int): Lobby type ID. [optional]
            region (int): Region ID. [optional]
            date (int): Days previous. [optional]
            lane_role (int): Lane Role ID. [optional]
            hero_id (int): Hero ID. [optional]
            is_radiant (int): Whether the player was radiant. [optional]
            included_account_id (int): Account IDs in the match (array). [optional]
            excluded_account_id (int): Account IDs not in the match (array). [optional]
            with_hero_id (int): Hero IDs on the player's team (array). [optional]
            against_hero_id (int): Hero IDs against the player's team (array). [optional]
            significant (int): Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches.. [optional]
            having (int): The minimum number of games played, for filtering hero stats. [optional]
            sort (str): The field to return matches sorted by in descending order. [optional]
            project (str): Fields to project (array). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [PlayerMatchesResponse]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        return self.players_account_id_matches_get_endpoint.call_with_http_info(**kwargs)

    def players_account_id_peers_get(
        self,
        account_id,
        **kwargs
    ):
        """GET /players/{account_id}/peers  # noqa: E501

        Players played with  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.players_account_id_peers_get(account_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (int): Steam32 account ID

        Keyword Args:
            limit (int): Number of matches to limit to. [optional]
            offset (int): Number of matches to offset start by. [optional]
            win (int): Whether the player won. [optional]
            patch (int): Patch ID. [optional]
            game_mode (int): Game Mode ID. [optional]
            lobby_type (int): Lobby type ID. [optional]
            region (int): Region ID. [optional]
            date (int): Days previous. [optional]
            lane_role (int): Lane Role ID. [optional]
            hero_id (int): Hero ID. [optional]
            is_radiant (int): Whether the player was radiant. [optional]
            included_account_id (int): Account IDs in the match (array). [optional]
            excluded_account_id (int): Account IDs not in the match (array). [optional]
            with_hero_id (int): Hero IDs on the player's team (array). [optional]
            against_hero_id (int): Hero IDs against the player's team (array). [optional]
            significant (int): Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches.. [optional]
            having (int): The minimum number of games played, for filtering hero stats. [optional]
            sort (str): The field to return matches sorted by in descending order. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [PlayerPeersResponse]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        return self.players_account_id_peers_get_endpoint.call_with_http_info(**kwargs)

    def players_account_id_pros_get(
        self,
        account_id,
        **kwargs
    ):
        """GET /players/{account_id}/pros  # noqa: E501

        Pro players played with  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.players_account_id_pros_get(account_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (int): Steam32 account ID

        Keyword Args:
            limit (int): Number of matches to limit to. [optional]
            offset (int): Number of matches to offset start by. [optional]
            win (int): Whether the player won. [optional]
            patch (int): Patch ID. [optional]
            game_mode (int): Game Mode ID. [optional]
            lobby_type (int): Lobby type ID. [optional]
            region (int): Region ID. [optional]
            date (int): Days previous. [optional]
            lane_role (int): Lane Role ID. [optional]
            hero_id (int): Hero ID. [optional]
            is_radiant (int): Whether the player was radiant. [optional]
            included_account_id (int): Account IDs in the match (array). [optional]
            excluded_account_id (int): Account IDs not in the match (array). [optional]
            with_hero_id (int): Hero IDs on the player's team (array). [optional]
            against_hero_id (int): Hero IDs against the player's team (array). [optional]
            significant (int): Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches.. [optional]
            having (int): The minimum number of games played, for filtering hero stats. [optional]
            sort (str): The field to return matches sorted by in descending order. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [PlayerProsResponse]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        return self.players_account_id_pros_get_endpoint.call_with_http_info(**kwargs)

    def players_account_id_rankings_get(
        self,
        account_id,
        **kwargs
    ):
        """GET /players/{account_id}/rankings  # noqa: E501

        Player hero rankings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.players_account_id_rankings_get(account_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (int): Steam32 account ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [PlayerRankingsResponse]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        return self.players_account_id_rankings_get_endpoint.call_with_http_info(**kwargs)

    def players_account_id_ratings_get(
        self,
        account_id,
        **kwargs
    ):
        """GET /players/{account_id}/ratings  # noqa: E501

        Player rating history  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.players_account_id_ratings_get(account_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (int): Steam32 account ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [PlayerRatingsResponse]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        return self.players_account_id_ratings_get_endpoint.call_with_http_info(**kwargs)

    def players_account_id_recent_matches_get(
        self,
        account_id,
        **kwargs
    ):
        """GET /players/{account_id}/recentMatches  # noqa: E501

        Recent matches played  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.players_account_id_recent_matches_get(account_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (int): Steam32 account ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [PlayerRecentMatchesResponse]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        return self.players_account_id_recent_matches_get_endpoint.call_with_http_info(**kwargs)

    def players_account_id_refresh_post(
        self,
        account_id,
        **kwargs
    ):
        """POST /players/{account_id}/refresh  # noqa: E501

        Refresh player match history  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.players_account_id_refresh_post(account_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (int): Steam32 account ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        return self.players_account_id_refresh_post_endpoint.call_with_http_info(**kwargs)

    def players_account_id_totals_get(
        self,
        account_id,
        **kwargs
    ):
        """GET /players/{account_id}/totals  # noqa: E501

        Totals in stats  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.players_account_id_totals_get(account_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (int): Steam32 account ID

        Keyword Args:
            limit (int): Number of matches to limit to. [optional]
            offset (int): Number of matches to offset start by. [optional]
            win (int): Whether the player won. [optional]
            patch (int): Patch ID. [optional]
            game_mode (int): Game Mode ID. [optional]
            lobby_type (int): Lobby type ID. [optional]
            region (int): Region ID. [optional]
            date (int): Days previous. [optional]
            lane_role (int): Lane Role ID. [optional]
            hero_id (int): Hero ID. [optional]
            is_radiant (int): Whether the player was radiant. [optional]
            included_account_id (int): Account IDs in the match (array). [optional]
            excluded_account_id (int): Account IDs not in the match (array). [optional]
            with_hero_id (int): Hero IDs on the player's team (array). [optional]
            against_hero_id (int): Hero IDs against the player's team (array). [optional]
            significant (int): Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches.. [optional]
            having (int): The minimum number of games played, for filtering hero stats. [optional]
            sort (str): The field to return matches sorted by in descending order. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [PlayerTotalsResponse]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        return self.players_account_id_totals_get_endpoint.call_with_http_info(**kwargs)

    def players_account_id_wardmap_get(
        self,
        account_id,
        **kwargs
    ):
        """GET /players/{account_id}/wardmap  # noqa: E501

        Wards placed in matches played  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.players_account_id_wardmap_get(account_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (int): Steam32 account ID

        Keyword Args:
            limit (int): Number of matches to limit to. [optional]
            offset (int): Number of matches to offset start by. [optional]
            win (int): Whether the player won. [optional]
            patch (int): Patch ID. [optional]
            game_mode (int): Game Mode ID. [optional]
            lobby_type (int): Lobby type ID. [optional]
            region (int): Region ID. [optional]
            date (int): Days previous. [optional]
            lane_role (int): Lane Role ID. [optional]
            hero_id (int): Hero ID. [optional]
            is_radiant (int): Whether the player was radiant. [optional]
            included_account_id (int): Account IDs in the match (array). [optional]
            excluded_account_id (int): Account IDs not in the match (array). [optional]
            with_hero_id (int): Hero IDs on the player's team (array). [optional]
            against_hero_id (int): Hero IDs against the player's team (array). [optional]
            significant (int): Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches.. [optional]
            having (int): The minimum number of games played, for filtering hero stats. [optional]
            sort (str): The field to return matches sorted by in descending order. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PlayerWardMapResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        return self.players_account_id_wardmap_get_endpoint.call_with_http_info(**kwargs)

    def players_account_id_wl_get(
        self,
        account_id,
        **kwargs
    ):
        """GET /players/{account_id}/wl  # noqa: E501

        Win/Loss count  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.players_account_id_wl_get(account_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (int): Steam32 account ID

        Keyword Args:
            limit (int): Number of matches to limit to. [optional]
            offset (int): Number of matches to offset start by. [optional]
            win (int): Whether the player won. [optional]
            patch (int): Patch ID. [optional]
            game_mode (int): Game Mode ID. [optional]
            lobby_type (int): Lobby type ID. [optional]
            region (int): Region ID. [optional]
            date (int): Days previous. [optional]
            lane_role (int): Lane Role ID. [optional]
            hero_id (int): Hero ID. [optional]
            is_radiant (int): Whether the player was radiant. [optional]
            included_account_id (int): Account IDs in the match (array). [optional]
            excluded_account_id (int): Account IDs not in the match (array). [optional]
            with_hero_id (int): Hero IDs on the player's team (array). [optional]
            against_hero_id (int): Hero IDs against the player's team (array). [optional]
            significant (int): Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches.. [optional]
            having (int): The minimum number of games played, for filtering hero stats. [optional]
            sort (str): The field to return matches sorted by in descending order. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PlayerWinLossResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        return self.players_account_id_wl_get_endpoint.call_with_http_info(**kwargs)

    def players_account_id_wordcloud_get(
        self,
        account_id,
        **kwargs
    ):
        """GET /players/{account_id}/wordcloud  # noqa: E501

        Words said/read in matches played  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.players_account_id_wordcloud_get(account_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (int): Steam32 account ID

        Keyword Args:
            limit (int): Number of matches to limit to. [optional]
            offset (int): Number of matches to offset start by. [optional]
            win (int): Whether the player won. [optional]
            patch (int): Patch ID. [optional]
            game_mode (int): Game Mode ID. [optional]
            lobby_type (int): Lobby type ID. [optional]
            region (int): Region ID. [optional]
            date (int): Days previous. [optional]
            lane_role (int): Lane Role ID. [optional]
            hero_id (int): Hero ID. [optional]
            is_radiant (int): Whether the player was radiant. [optional]
            included_account_id (int): Account IDs in the match (array). [optional]
            excluded_account_id (int): Account IDs not in the match (array). [optional]
            with_hero_id (int): Hero IDs on the player's team (array). [optional]
            against_hero_id (int): Hero IDs against the player's team (array). [optional]
            significant (int): Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches.. [optional]
            having (int): The minimum number of games played, for filtering hero stats. [optional]
            sort (str): The field to return matches sorted by in descending order. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PlayerWordCloudResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        return self.players_account_id_wordcloud_get_endpoint.call_with_http_info(**kwargs)

